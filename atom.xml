<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[死亡的飞翔]]></title>
  <link href="http://dahakawang.github.com/atom.xml" rel="self"/>
  <link href="http://dahakawang.github.com/"/>
  <updated>2013-03-12T20:31:11+08:00</updated>
  <id>http://dahakawang.github.com/</id>
  <author>
    <name><![CDATA[王凯强]]></name>
    <email><![CDATA[DevilDavidWang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【Ruby】require背后的故事]]></title>
    <link href="http://dahakawang.github.com/blog/2013/03/12/ruby-story-behind-require/"/>
    <updated>2013-03-12T14:39:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2013/03/12/ruby-story-behind-require</id>
    <content type="html"><![CDATA[<p>接触ruby有一段时间了，说起来自己和这门语言倒挺有缘。学生时代的时候，曾经沉迷于一款叫做RPG Maker的软件。当时和朋友以班上的同学为原型写了一部武侠剧，并计划用RPG Maker制作成游戏，乐此不疲。这个RPG Maker在内部使用了一门脚本语言来描述其游戏逻辑，这门语言便是Ruby。于是乎为了修改游戏框架、拓展引擎原有特性，自己花了不少功夫学习Ruby。可惜最后，由于高考临近，Ruby随着RPG Maker一块儿，淹没在了记忆的深处。</p>

<!-- more -->

<p>最近突然间有了兴趣，又把Ruby拿出来看看，却发觉这五六年间，Ruby语言的变化之大，是我难以预期的。无论是语言特性本身，还是周边的开发工具、程序库，都较之前有了较大的发展，于是重温变成了重新学习。</p>

<p>既然是学习，光说不练可不行，于是乎又一边开始学习起了Ruby on Rails来，希望能够学以致用。RoR在Ruby社区内可是有着响当当的名号，可以说Ruby之所以名声大噪，很大程度上都是由于RoR的功劳。RoR是一个纯粹的开源软件，它凝聚了世界上最优秀Ruby程序员的勤劳和天分。而我自己，也由于对RoR的研读，了解到了不少Ruby的精妙之处。喟叹之际，便也想对其抽丝剥茧，习其精髓，并记录于博客之中，以飨诸位同好。 Y(^_^)Y</p>

<h2 id="require">require到底干了什么？</h2>

<p>第一次看到require语句的时候，立刻有一种似曾相识的感觉。作为一名C语言起家的技术人，我看到了include的影子。从开发者的角度来说，这两条指令完成了相似的工作：告诉编译器我们想要引用其它地方的代码。但是，仔细思考和实验过后，却不难发觉，这两条指令在实现层面上乃是千差万别。</p>

<p>当我们include一个头文件的时候发生了什么？答案是编译器找到对应的头文件，并将其原地展开。通过对头文件中代码的解析，编译器知道了我们要引用的代码的声明（Declaration）。所谓声明，即是指编译器知道将要引用的代码到底长成什么样，而并不知道代码具体是什么（Definition）。而为了让我们的代码真正地用上所引用的代码，我们需要在链接的时候，向linker指明引用库的地址。而这个所谓的引用库，才包含了我们欲引用代码的具体定义。</p>

<p>反观require呢？当我们require某个外部代码的时候，我们实际上是告诉编译器寻找对应的rb文件。这个rb文件中有什么？答案是，引用代码的具体定义。这时候require和include有何区别的答案便呼之欲出了：由于Ruby没有传统意义上的链接过程，我们require实际上是载入代码的实现/定义；而对于C编译器来说，include只不过是告诉编译器代码长啥样，这使得编译器能够生成＂调用代码＂，而＂实现代码＂则是在链接阶段予以提供的。</p>

<h2 id="require-1">require的实现</h2>

<p>按照官方解释，require将会在Ruby的LOAD_PATH中查找对应文件并将其载入。好奇心促使我跟踪了require的执行过程，却发觉require并没有调用系统默认的Kernel#require，而是调用到了位于custom_require.rb中的Kernel#require函数之中。</p>

<p>而恰巧的是，这个文件是属于RubyGem的一部分。到目前为止，我们还能够理解发生了什么：RubyGem用自己的require替代了系统默认的版本，并藉此实现了它自己的逻辑。</p>

<p>可是这样理解后的问题接踵而来，首当其冲的问题便是，明明没有人引用RubyGem，那么这个文件是谁通过怎样的方式载入的呢？再则，我们开启irb，这时候理当没有任何Gem被载入，可是发觉Gem这个模块已经被定义了是怎么回事呢？</p>

<p>啊，一定有谁在我们的代码执行前就载入了RubyGem！我在RubyGem的代码中添加了打印函数调用栈的逻辑，然后运行一个空的Ruby脚本，看到了如下的现象：</p>

<pre><code>david@david-K40IN:~/Desktop/root$ ruby -e ''
/home/david/.rvm/rubies/ruby-1.9.3-p362/lib/ruby/site_ruby/1.9.1/rubygems.rb:1282:in `require'
/home/david/.rvm/rubies/ruby-1.9.3-p362/lib/ruby/site_ruby/1.9.1/rubygems.rb:1282:in `&lt;top (required)&gt;'
 &lt;internal:gem_prelude&gt;:1:in `require'
&lt;internal:gem_prelude&gt;:1:in `&lt;compiled&gt;'
</code></pre>

<p>可以观察到是一个叫做gem_prelude的文件载入了RubyGem。这个文件是什么？前面的internal似乎显示了它不一样的地位。我搜遍Ruby的目录，也没有找到这么一个文件，却只是在Ruby的源码目录中找到了它的身影。</p>

<p>原来，这个文件是编译Ruby时自动生成的（这里仅讨论Ruby较新的版本(1.9.x)，实现代码<a href="https://github.com/ruby/ruby/blob/trunk/tool/compile_prelude.rb">见此</a>)，它的内容只有一句话，那便是<code>require 'RubyGem' if defined?(Gem)</code>。其中Gem符号是在ruby.c里直接定义的（Hardcoded），如果你要取消该特性，编译Ruby的时候需要指明<code>--disable-gems</code>选项。</p>

<p>现在，问题的答案很明朗了。由于RubyGem使用地十分广泛，以至于Ruby开发团队决定予以其直接支持，这便是为什么我们总是发觉RubyGem被载入的原因了。这也同时更好地解释了，明明也是一个Gem，为什么RubyGem没有和其他Gem放到一块儿，并遵循Gem名加上版本号的命名方式。</p>

<h2 id="rubygem---">RubyGem - 将宝石打包</h2>

<p>咱们再来谈谈Ruby的包管理机制。这里的基本思路十分简单，Ruby本身载入某个代码只会在LOAD_PATH里寻找，如果我们定义＂使用某个Gem＂为将Gem所在路径添加到Ruby的LOAD_PATH里，这样当我们使用了某个Gem后，我们便能够载入这个Gem的代码了。其次，我们在包的根目录下放上某个包含诸如作者、主页、依赖的库等等信息的文件，这便有了Gem的元数据信息。最后，我们把Gem的根目录命名为Gem名加版本号，这样多版本的管理机制也就有了。于是乎，整个Gem的工作机制便呼之欲出了。</p>

<p>按照惯例，我们一般是用require ‘arel’的方式来载入Gem代码。可是，根据require函数定义，我们实际上需要将类似’gems/arel-3.0.2/arel’的参数传给require才能达到我们的目的。为什么简单的require ‘arel’能行呢？因为我们在此之前使用了gem ‘arel’ 语句，是它按照之前提到的规律找到了arel库某个版本的位置，并将它加入到LOAD_PATH里，这才使我们能够简单地require一个Gem库。</p>

<p>不过，正如上一节指出的，在新版本的Ruby里，Kernel#require早已自动被RubyGem里的同名函数覆盖了。因此，在新版本的Ruby里，我们连gem语句都不需要，可以直接require了（老版本则需要我们显式调用require ‘rubygem’才行）。不过，若是你需要明确的指定使用某一版本的Gem（Gem ‘arel’, ‘＞=3.0.0’），还是需要显示地调用gem方法。</p>

<p>RubyGem这个库具有两面性，上面的讨论仅是从Gem的使用者角度展开的。而RubyGem同时也给予了Gem库开发者以大量支持，但是我在这里不会讨论。</p>

<h2 id="bundler">Bundler</h2>

<p>好的，终于谈到它了，它是我最喜欢的一个工具。我在Linux下开发时间虽然不长，但是痛苦程度应该比起经验丰富的开发者也不遑多让。原因在于传统的Linux开发相当复杂，除了软件系统本身的复杂性外，还得受错综复杂的各种依赖关系所累。常常是一个程序还没开始编译，就得先安装个一天的各种依赖库再说。</p>

<p>但是，这个令我十分头痛的问题却被Bundler解决了，而且解决地十分漂亮。你的软件需要什么依赖库，具体依赖啥版本，你写成一个Gemfile清单来看。我check out你的代码后，啥也不管，简单地bundle install，开发环境就搭建好了，各种依赖库也到位了，好不痛快！</p>

<p>bundle install指令致力于确保Gem所有依赖库均被安装到本机，但它并不保证列在Gemfile里的依赖库在运行时被载入。为了让我们的程序使用上这些库，我们需要在运行时调用Bundler.setup，该方法将列举在Gemfile里的所有Gem被添加到LOAD_PATH中去。因此，Bundler.setup的行为类似于gem方法，用于帮助我们将特定版本的Gem载入到LOAD_PATH。只不过Bundler提供了更为高级的机制，使得我们能够在Gemfile里集中地管理所有依赖，并且省去了一一添加依赖的繁琐过程。</p>

<p>Bundler还提供了一个Bundler.require方法，该方法提供了比Bundler.setup更方便的特性，它将直接将Gemfile列举的依赖全部载入内存。关于使用Bundler.setup还是Bundler.require的讨论已经存在已久，无非就是Bundler.setup提供了一个妥协，使得程序可以滞后载入（Lazy Loading），从而减少不必要的加载，加快程序启动速度。而Bundler.require则主要是基于方便开发者（Programmer Friendly）的考量，它使开发者省去了大量的精力去显式地加载代码。</p>

<p>另外一个问题是有关Gemfile.lock文件的。我们是否需要check in这个文件到代码库里？这里的答案要度时而定。首先，我们知道Gemfile一般指明了一个依赖版本范围（或者没有），当我们运行bundle install的之后，生成的Gemfile.lock实际上是指明了每个依赖Gem的一个<strong>固定版本</strong>(在满足Gemfile指明的版本范围前提下)。</p>

<p>然后我们需要考虑这么一个convention，即我们开发Gem库的时候，我们总是希望我们的库能够和尽可能多版本的依赖Gem一同工作，而当我们开发应用的时候，我们往往希望我们依赖的Gem版本维持不变（因为此时的测试十分严格，将精确到Gem库的具体行为上），以保证我们的应用发布后十分稳定。</p>

<p>综合以上我们得出了结论，在开发Gem的时候，我们不添加Gemfile.lock到代码库，因为我们希望其他开发者通过bundle install绑定到依赖库尽可能多的版本，借此保证我们的Gem能够和更多的依赖库协同工作。而当我们开发应用之时，我们希望所有的开发者以及用户，严格的使用和我一样的依赖库版本，这使的每个人使用的依赖库行为严格一致，从而保证了应用的健壮性。</p>

<h2 id="bundlerrubygem---gem">当Bundler遇见RubyGem - Gem开发者需要知道的</h2>

<p>第一次使用bundler的时候，在为其精妙的设计而感叹的之际，一个疑问始终萦绕在我的心中：.gemspec和Gemfile这两个设计是不是过于冗余了？我们在开发Gem的时候，明明已经有.gemspec（RubyGem的一部分）指出依赖关系了，为什么此时Bundler还要鸡肋地设计一个Gemfile呢？</p>

<p>为了说明其原因，我们必须先回答一个基本问题：.gemspec和Gemfile分别是干嘛的？我们知道，.gemspec主要是用来描述Gem的元数据信息的，我们除了可以在此包含Gem的基本信息之外，还能够在此指出本Gem具体依赖于哪些其他Gem。不过，值得注意的是，这里仅仅是指出依赖关系，.gemspec并没有提供任何机制告诉我们，到哪里才能下载并部署这些被依赖的Gem。</p>

<p>.gemspec之所以缺少运行时的支持，那是因为下载、部署、以及载入并不是其设计之初的职责所在。这些问题是被后来者Bundler解决的。那么，既然搞清了其用途上的差异，我们又当如何解决其内容的冗余这个问题呢？答案很简单，在Gemfile文件中调用gemspec方法，它会自动告诉Bundler到同目录下查找.gemspec文件并载入其中指明的Gem依赖。</p>

<h2 id="rails">Rails的代码载入机制</h2>

<p>Rails开发者倾向于不使用显式的代码载入机制，为了实现这个目的，Rails使用了大量的自动载入机制。其一便是autoload，关于它的原理，以后我会撰文剖析。autoload主要用于载入Rails自己的组件，而对于依赖Gem的载入，Rails使用了Bundler.require机制。在Rails项目的文件config/application.rb负责实现此特性：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Assets should be precompiled for production (so we don&#39;t need the gems loaded then)</span>
</span><span class="line"><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="o">*</span><span class="no">Rails</span><span class="o">.</span><span class="n">groups</span><span class="p">(</span><span class="ss">assets</span><span class="p">:</span> <span class="sx">%w(development test)</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">写在最后</h2>

<p>代码载入看似很简单，只不过是将代码读入内存并且编译。可是，将这个需求放到真正的工程世界之后，情况便大不相同了。我们需要同时管理多个版本的组件，我们需要载入特定版本的组件，我们还需要解析某个组件的依赖……诸如此类的问题将代码载入这个话题无限扩大了，以至于Ruby后来才有了RubyGem、Bundler等一系列的工具、程序库来解决这些问题。我们要了解这个话题，不仅仅是一个技术人热爱技术的本性使然，更是为了在现实世界复杂的开发、运行环境里，更好的实现我们的目的（DO Things Right）。愿与诸君共勉！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRS Audio Sandbox破解纪实]]></title>
    <link href="http://dahakawang.github.com/blog/2012/06/22/srs-audio-sandbox-cracked/"/>
    <updated>2012-06-22T22:37:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2012/06/22/srs-audio-sandbox-cracked</id>
    <content type="html"><![CDATA[<p>最近挺忙的，本来需要各种为前路做准备，无奈自己天生属于低血压型的人，偏偏就是提不起劲儿来干正事儿，却把大好的一天光阴全交代到SRS的分析工作上了。虽然说这多少算不务正业，不过由于本人有着严重的软件新版本强迫症，故这算是给自己的一个开脱理由吧。</p>

<p>这款软件的破解工作展开比较容易，没有加壳，直接上工具分析之。首先请出OllyDBG来，通过查找字符串引用和查找API MessageBox引用的老法子，很容易就定位了大概的关键代码位置。</p>

<!-- more -->

<p>找到关键位置后，顺手又记录了一下函数调用栈，然后打开了神器IDA。用IDA载入后，跳转到之前找到的关键代码RVA处，着手分析。说起来，我自己喜欢将动态和静态调试方法结合起来用，不如果不愿意太费神分析汇编代码，有时候直接看运行时结果便是最直观和省时的。载入后发觉之前判断的关键点实际上是CWinApp::ShowAppMessageBox函数，继续沿着刚才记录的函数运行时调用栈往上找，依次顺藤摸瓜：AfxMessageBox—&gt;Sub44D240，这才到了SRS程序的代码领空，于是正是着手分析。（IDA这个静态分析功能实在是强大，它可以根据二进制代码特征判断出其是否是库函数代码。这大大节省了我的时间，应为对这类代码我只需要看SDK文档就行了，而不需要去分析其实际的代码行为）</p>

<p>进一步根据线索判断（Sub44D240里包含了SendMessage、AfxMessageBox、GetWindowText等函数，足以说明该函数的关键作用），我锁定在了Sub44D240函数的Sub4430F0调用上，继续追踪到Sub442FF0上，继而是Sub44B9E0过程，最终到了Sub44BC30过程上。在该过程中，我同时追踪到了用户输入的ProductID以及Serial Number等信息，这进一步是我确认了我的判断。</p>

<p>该过程具体代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Sub44BC30代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span> <span class="c1">; =============== S U B R O U T I N E =======================================</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span> <span class="c1">; Attributes: bp-based frame</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span> <span class="nb">ch</span><span class="nv">eck_PID_SN</span>    <span class="nv">proc</span> <span class="nv">near</span>               <span class="c1">; CODE XREF: realCheckSN+182p</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span> <span class="nv">productId_segs_temp</span><span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span> <span class="o">-</span><span class="mh">14h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span> <span class="nv">new_ProdectID</span>   <span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span> <span class="o">-</span><span class="mh">10h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span> <span class="nv">sn_lowerDWord</span>   <span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span> <span class="o">-</span><span class="mi">4</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span> <span class="nv">SN</span>              <span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span>  <span class="mi">8</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC30</span>                 <span class="nv">push</span>    <span class="nb">ebp</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC31</span>                 <span class="nv">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC33</span>                 <span class="nv">and</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0FFFFFFF8h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC36</span>                 <span class="nv">sub</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">14h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC39</span>                 <span class="nv">push</span>    <span class="nb">ebx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC3A</span>                 <span class="nv">push</span>    <span class="nb">esi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC3B</span>                 <span class="nv">push</span>    <span class="nb">edi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC3C</span>                 <span class="nv">push</span>    <span class="mh">14h</span>             <span class="c1">; unsigned int</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC3E</span>                 <span class="nv">mov</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">eax</span>        <span class="c1">; ebx指向ProductID首位置</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC40</span>                 <span class="nv">call</span>    <span class="nv">j_??2@YAPAXI@Z</span>  <span class="c1">; operator new(uint)</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC45</span>                 <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC47</span>                 <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC4A</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC4B</span>                 <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">SN</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC4E</span>                 <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC51</span>                 <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC52</span>                 <span class="nv">lea</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC55</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC56</span>                 <span class="nv">push</span>    <span class="nb">esi</span>             <span class="c1">; 新申请的14h的空间</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC57</span>                 <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">a4x4x4x4x</span> <span class="c1">; &quot;%4x-%4x-%4x-%4x&quot;</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC5C</span>                 <span class="nv">push</span>    <span class="nb">eax</span>             <span class="c1">; SN首地址</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC5D</span>                 <span class="nv">call</span>    <span class="nv">String2Integer</span>  <span class="c1">; 将字符串SN转换为数组，比如</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC5D</span>                                         <span class="c1">; “E6E9-24CB-2968-09BC”变为</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC5D</span>                                         <span class="c1">; E9 E6 ...</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC62</span>                 <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>    <span class="c1">; ECX为后半部分SN</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC65</span>                 <span class="nv">mov</span>     <span class="nb">edi</span><span class="p">,</span> <span class="p">[</span><span class="nb">esi</span><span class="p">]</span>      <span class="c1">; EDI为前半部分SN</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC67</span>                 <span class="nv">push</span>    <span class="nb">esi</span>             <span class="c1">; void *</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC68</span>                 <span class="nv">mov</span>     <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">40h</span><span class="o">+</span><span class="nv">sn_lowerDWord</span><span class="p">],</span> <span class="nb">ecx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC6C</span>                 <span class="nv">call</span>    <span class="nv">j__free</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC71</span>                 <span class="nv">lea</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">40h</span><span class="o">+</span><span class="nv">productId_segs_temp</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC75</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC76</span>                 <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">a4x</span>      <span class="c1">; &quot;%4x&quot;</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC7B</span>                 <span class="nv">push</span>    <span class="nb">ebx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC7C</span>                 <span class="nv">call</span>    <span class="nv">String2Integer</span>  <span class="c1">; 将ProductID第一段转换为Word</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC81</span>                 <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">4Ch</span><span class="o">+</span><span class="nv">productId_segs_temp</span><span class="p">]</span> <span class="c1">; esi储存productId_1</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC85</span>                 <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">4Ch</span><span class="o">+</span><span class="nv">productId_segs_temp</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC89</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC8A</span>                 <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebx</span><span class="o">+</span><span class="mh">0Ah</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC8D</span>                 <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">asc_48C804</span> <span class="c1">; &quot;%x&quot;</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC92</span>                 <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC93</span>                 <span class="nv">call</span>    <span class="nv">String2Integer</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC98</span>                 <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">58h</span><span class="o">+</span><span class="nv">productId_segs_temp</span><span class="p">]</span> <span class="c1">; EDX储存ProductId_2</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC9C</span>                 <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">38h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BC9F</span>                 <span class="nv">xor</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCA1</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCA2</span>                 <span class="nv">push</span>    <span class="nb">esi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCA3</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCA4</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCA5</span>                 <span class="nv">call</span>    <span class="nv">__allmul</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCAA</span>                 <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>        <span class="c1">; product_1*product_2乘积的低word放入esi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCAC</span>                 <span class="nv">lea</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">20h</span><span class="o">+</span><span class="nv">productId_segs_temp</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCB0</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCB1</span>                 <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebx</span><span class="o">+</span><span class="mh">14h</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCB4</span>                 <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">asc_48C804</span> <span class="c1">; &quot;%x&quot;</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCB9</span>                 <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCBA</span>                 <span class="nv">mov</span>     <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">2Ch</span><span class="o">+</span><span class="nv">new_ProdectID</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCBE</span>                 <span class="nv">call</span>    <span class="nv">String2Integer</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCC3</span>                 <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">2Ch</span><span class="o">+</span><span class="nv">new_ProdectID</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCC7</span>                 <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">2Ch</span><span class="o">+</span><span class="nv">productId_segs_temp</span><span class="p">]</span> <span class="c1">; eax保存productId_3</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCCB</span>                 <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0Ch</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCCE</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCCF</span>                 <span class="nv">push</span>    <span class="nb">esi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCD0</span>                 <span class="nv">push</span>    <span class="mi">0</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCD2</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCD3</span>                 <span class="nv">call</span>    <span class="nv">__allmul</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCD8</span>                 <span class="nv">lea</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">20h</span><span class="o">+</span><span class="nv">productId_segs_temp</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCDC</span>                 <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCDD</span>                 <span class="nv">push</span>    <span class="nv">offset</span> <span class="nv">asc_48C804</span> <span class="c1">; &quot;%x&quot;</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCE2</span>                 <span class="nv">add</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="mh">1Eh</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCE5</span>                 <span class="nv">push</span>    <span class="nb">ebx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCE6</span>                 <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCE8</span>                 <span class="nv">mov</span>     <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">2Ch</span><span class="o">+</span><span class="nv">new_ProdectID</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCEC</span>                 <span class="nv">call</span>    <span class="nv">String2Integer</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCF1</span>                 <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">2Ch</span><span class="o">+</span><span class="nv">new_ProdectID</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCF5</span>                 <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">2Ch</span><span class="o">+</span><span class="nv">productId_segs_temp</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCF9</span>                 <span class="nv">add</span>     <span class="nb">esp</span><span class="p">,</span> <span class="mh">0Ch</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCFC</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCFD</span>                 <span class="nv">push</span>    <span class="nb">esi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BCFE</span>                 <span class="nv">push</span>    <span class="mi">0</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD00</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD01</span>                 <span class="nv">call</span>    <span class="nv">__allmul</span>        <span class="c1">; 结果edx高位,eax低位</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD06</span>                 <span class="nv">mov</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD08</span>                 <span class="nv">shr</span>     <span class="nb">esi</span><span class="p">,</span> <span class="mh">10h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD0B</span>                 <span class="nv">mov</span>     <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">20h</span><span class="o">+</span><span class="nv">new_ProdectID</span><span class="p">],</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD0F</span>                 <span class="nv">mov</span>     <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">20h</span><span class="o">+</span><span class="nv">new_ProdectID</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD13</span>                 <span class="nv">xor</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD15</span>                 <span class="nv">mov</span>     <span class="nb">cl</span><span class="p">,</span> <span class="mh">10h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD17</span>                 <span class="nv">call</span>    <span class="nv">__allshr</span>        <span class="c1">; {edx,eax}==new_prodectID &gt;&gt; 10h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD1C</span>                 <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">20h</span><span class="o">+</span><span class="nv">new_ProdectID</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD20</span>                 <span class="nv">xor</span>     <span class="nb">edx</span><span class="p">,</span> <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD22</span>                 <span class="nv">push</span>    <span class="mi">1</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD24</span>                 <span class="nv">and</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">0FFFF0000h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD29</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD2A</span>                 <span class="nv">add</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD2C</span>                 <span class="nv">adc</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD2E</span>                 <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">28h</span><span class="o">+</span><span class="nv">new_ProdectID</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD32</span>                 <span class="nv">push</span>    <span class="nb">ecx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD33</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD34</span>                 <span class="nv">call</span>    <span class="nv">__allmul</span>        <span class="c1">; eax=0, edx为new_productID的低位</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD39</span>                 <span class="nv">push</span>    <span class="mi">0</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD3B</span>                 <span class="nv">add</span>     <span class="nb">esi</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD3D</span>                 <span class="nv">push</span>    <span class="mh">8475h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD42</span>                 <span class="nv">adc</span>     <span class="nb">ebx</span><span class="p">,</span> <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD44</span>                 <span class="nv">push</span>    <span class="nb">ebx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD45</span>                 <span class="nv">push</span>    <span class="nb">esi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD46</span>                 <span class="nv">call</span>    <span class="nv">__alldiv</span>        <span class="c1">; {edx,eax} == {edx,esi} / 0x8475</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD4B</span>                 <span class="nv">push</span>    <span class="mi">0</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD4D</span>                 <span class="nv">push</span>    <span class="mh">0AE6000h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD52</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD53</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD54</span>                 <span class="nv">call</span>    <span class="nv">__allmul</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD59</span>                 <span class="nv">add</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">91F2884Dh</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD5E</span>                 <span class="nv">adc</span>     <span class="nb">edx</span><span class="p">,</span> <span class="mh">2DCh</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD64</span>                 <span class="nv">mov</span>     <span class="nb">cl</span><span class="p">,</span> <span class="mh">0Ah</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD66</span>                 <span class="nv">call</span>    <span class="nv">__allshr</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD6B</span>                 <span class="nv">push</span>    <span class="mi">0</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD6D</span>                 <span class="nv">push</span>    <span class="mh">2046h</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD72</span>                 <span class="nv">push</span>    <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD73</span>                 <span class="nv">push</span>    <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD74</span>                 <span class="nv">call</span>    <span class="nv">__allmul</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD79</span>                 <span class="nv">mov</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="mh">0FFFFFFFEh</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD7E</span>                 <span class="nv">sub</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD80</span>                 <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mh">0FFFFFFFFh</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD85</span>                 <span class="nv">sbb</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">edx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD87</span>                 <span class="nv">mov</span>     <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mh">20h</span><span class="o">+</span><span class="nv">sn_lowerDWord</span><span class="p">]</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD8B</span>                 <span class="nv">shld</span>    <span class="nb">edx</span><span class="p">,</span> <span class="nb">edi</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD8F</span>                 <span class="nv">add</span>     <span class="nb">edi</span><span class="p">,</span> <span class="nb">edi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD91</span>                 <span class="nv">cmp</span>     <span class="nb">edi</span><span class="p">,</span> <span class="nb">ecx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD93</span>                 <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_44BDA5</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD95</span>                 <span class="nv">cmp</span>     <span class="nb">edx</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD97</span>                 <span class="nv">jnz</span>     <span class="nv">short</span> <span class="nv">loc_44BDA5</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD99</span>                 <span class="nv">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD9E</span>                 <span class="nv">pop</span>     <span class="nb">edi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BD9F</span>                 <span class="nv">pop</span>     <span class="nb">esi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA0</span>                 <span class="nv">pop</span>     <span class="nb">ebx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA1</span>                 <span class="nv">mov</span>     <span class="nb">esp</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA3</span>                 <span class="nv">pop</span>     <span class="nb">ebp</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA4</span>                 <span class="nv">retn</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA5</span> <span class="c1">; ---------------------------------------------------------------------------</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA5</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA5</span> <span class="nv">loc_44BDA5</span><span class="p">:</span>                             <span class="c1">; CODE XREF: check_PID_SN+163j</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA5</span>                                         <span class="c1">; check_PID_SN+167j</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA5</span>                 <span class="nv">pop</span>     <span class="nb">edi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA6</span>                 <span class="nv">pop</span>     <span class="nb">esi</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA7</span>                 <span class="nv">xor</span>     <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDA9</span>                 <span class="nv">pop</span>     <span class="nb">ebx</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDAA</span>                 <span class="nv">mov</span>     <span class="nb">esp</span><span class="p">,</span> <span class="nb">ebp</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDAC</span>                 <span class="nv">pop</span>     <span class="nb">ebp</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDAD</span>                 <span class="nv">retn</span>
</span><span class="line">  <span class="nl">.text:</span><span class="err">0044</span><span class="nf">BDAD</span> <span class="nb">ch</span><span class="nv">eck_PID_SN</span>    <span class="nv">endp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">基本思路</h2>

<p>通过分析，我了解到，其算法大概思路如下：首先，注册流程有效输入为Serial Number和Product ID，Registration No实际上没有参与注册的验证计算过程。SRS通过系统各种信息生成Product ID，然后用户需要提供与Product ID匹配的Serial Number方能注册。当然，Serial Number是需要你拿美刀换的。</p>

<p>简而言之，SRS将Product ID作fp变换，得到一个64bit长的整数，并将用户输入的序列号做fs变换同样得到一个64bit长整数。为了使注册成功，需要满足：</p>

<pre><code>fp(gen()) = fs(SerialNumber) 成立      (1)
</code></pre>

<p>这其中，gen()的算法我们不需要管，因为其结果在界面Product ID框中已经显示了。我们需要找到fp和fs的实现算法，并顺利推出fs-1的实现。从而：
SerialNumber = fs<sup>-1</sup>( fp(ProductID) )   (2)</p>

<h2 id="product-id">Product ID变换算法描述</h2>

<p>我们首先描述fp的实现。fp基本上是由我不知道原理的各种数值变换组成，为了精确表述，我直接用C语言描述：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">Product</span> <span class="n">ID</span><span class="err">变换函数描述</span>
</span><span class="line"> <span class="kr">__int64</span> <span class="n">getProductID</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">id</span><span class="p">){</span>
</span><span class="line">     <span class="kr">__int64</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">     <span class="n">DWORD</span> <span class="n">elem</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">         <span class="n">sscanf</span><span class="p">(</span><span class="n">id</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">5</span><span class="p">),</span> <span class="s">&quot;%x&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">elem</span><span class="p">);</span>
</span><span class="line">         <span class="n">temp</span> <span class="o">*=</span> <span class="n">elem</span><span class="p">;</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line">
</span><span class="line">     <span class="c1">//高地位变换</span>
</span><span class="line">     <span class="n">DWORD</span> <span class="n">lowerDWord</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class="line">     <span class="n">DWORD</span> <span class="n">upperDWord</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">&gt;&gt;</span> <span class="mh">0x20</span><span class="p">;</span>
</span><span class="line">     <span class="n">WORD</span> <span class="n">lower</span> <span class="o">=</span> <span class="n">upperDWord</span><span class="p">;</span>
</span><span class="line">     <span class="n">WORD</span> <span class="n">upper</span> <span class="o">=</span> <span class="n">upperDWord</span> <span class="o">&gt;&gt;</span> <span class="mh">0x10</span><span class="p">;</span>
</span><span class="line">     <span class="n">upperDWord</span> <span class="o">=</span> <span class="n">lower</span><span class="p">;</span>
</span><span class="line">     <span class="n">upperDWord</span> <span class="o">&lt;&lt;=</span> <span class="mh">0x10</span><span class="p">;</span>
</span><span class="line">     <span class="n">upperDWord</span> <span class="o">|=</span> <span class="n">upper</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="n">temp</span> <span class="o">=</span> <span class="n">lowerDWord</span><span class="p">;</span>
</span><span class="line">     <span class="n">temp</span> <span class="o">&lt;&lt;=</span> <span class="mh">0x20</span><span class="p">;</span>
</span><span class="line">     <span class="n">temp</span> <span class="o">|=</span> <span class="n">upperDWord</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">     <span class="n">temp</span> <span class="o">/=</span> <span class="mh">0x8475</span><span class="p">;</span>
</span><span class="line">     <span class="n">temp</span> <span class="o">*=</span> <span class="mh">0xAE6000</span><span class="p">;</span>
</span><span class="line">     <span class="n">temp</span> <span class="o">+=</span> <span class="mh">0x2DC91F2884D</span><span class="p">;</span>
</span><span class="line">     <span class="n">temp</span> <span class="o">&gt;&gt;=</span> <span class="mh">0xA</span><span class="p">;</span>
</span><span class="line">     <span class="n">temp</span> <span class="o">*=</span> <span class="mh">0x2046</span><span class="p">;</span>
</span><span class="line">     <span class="n">temp</span> <span class="o">=</span> <span class="mh">0xfffffffffffffffe</span> <span class="o">-</span> <span class="n">temp</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span><span class="line"> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="serial-number">Serial Number变换算法描述　　</h2>

<p>接下来描述fs函数的实现。我们称变换后的Product ID为TransPID，并且LowerDW和HighDW表示一个64bit整数的低双字和高双字，shld表示对应汇编指令的函数,TransSerialNumberHighDW和TransSerialNumberLowDW分别表示变换后的序列号高双字和低双字。则有：</p>

<pre><code>TransSerialNumberHighDW(SerialNumber)=shld(UpperDW(SerialNumber),LowerDW(SerialNumber),1)（3）
TransSerialNumberLowDW(SerialNumber) = LowerDW(SerialNumber) + LowerDW(SerialNumber)；　　　 （4）
fs(SerialNumber) =   TransSerialNumberHighDW&lt;&lt; 32 | TransSerialNumberLowDW；　　　　　　　　　（5）
</code></pre>

<h2 id="serial-number-1">Serial Number逆向变换算法描述</h2>

<p>了解了fs的实现，我们接下来需要着手研究实现fs-1的思路。由于fs高双字和低双字分别由不同的方式变换的（3）、（4），所以我们需要分别求出SerialNumber的高低双字。得到Serial Number的低双字很简单，由（4）可知，我们只要将LowerDW(fp(ProductID))除以2就行。但需注意的是，整个双字值域中，LowerDW(fp(ProductID)) / 2 + (2«31)同样能满足条件（由于溢出导致的相等），这点很重要！</p>

<p>再来考虑高位的算法。我们需要把HighDW(fp(ProductID))往右移一位，这是左边补入的一位可以任意。这时需要注意，考虑到shld性质，有以下两种情况：</p>

<ol>
  <li>
    <p>如果HighDW(fp(ProductID))最低位是1则需要LowerDW(SerialNumber)的最高位为1</p>
  </li>
  <li>
    <p>如果HighDW(fp(ProductID))最低位是0则需要LowerDW(SerialNumber)的最高位为0</p>
  </li>
</ol>

<p>考虑到LowerDW(fp(ProductID)) / 2和LowerDW(fp(ProductID)) / 2 + (2«31)均可满足条件，若是情况1则选取后者，因为此时可保证LowerDW(SerialNumber)的最高位为1。同理，若是情况2则需选择前者。</p>

<p>该算法的C语言描述如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>SerialNumber逆变换算法</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"> <span class="kt">void</span> <span class="nf">getSerialNumber</span><span class="p">(</span><span class="kr">__int64</span> <span class="n">productId</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span><span class="p">){</span>
</span><span class="line">     <span class="n">DWORD</span> <span class="n">upper</span> <span class="o">=</span> <span class="n">productId</span> <span class="o">&gt;&gt;</span> <span class="mh">0x20</span><span class="p">;</span>
</span><span class="line">     <span class="n">DWORD</span> <span class="n">lower</span> <span class="o">=</span> <span class="n">productId</span><span class="p">;</span>
</span><span class="line">     <span class="n">assert</span><span class="p">((</span><span class="n">lower</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">//lower = snLower + snLower因此lower必须为偶数</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">     <span class="n">DWORD</span> <span class="n">snUpper</span> <span class="o">=</span> <span class="n">upper</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="n">DWORD</span> <span class="n">snLower</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">     <span class="k">if</span><span class="p">((</span><span class="n">upper</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class="line">         <span class="n">snLower</span> <span class="o">=</span> <span class="n">lower</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">         <span class="n">snLower</span> <span class="o">+=</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">31</span><span class="p">);</span>
</span><span class="line">     <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class="line">         <span class="n">snLower</span> <span class="o">=</span> <span class="n">lower</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line">
</span><span class="line">     <span class="n">DWORDLONG</span> <span class="n">sn</span> <span class="o">=</span> <span class="n">snUpper</span><span class="p">;</span>
</span><span class="line">     <span class="n">sn</span> <span class="o">&lt;&lt;=</span> <span class="mh">0x20</span><span class="p">;</span>
</span><span class="line">     <span class="n">sn</span> <span class="o">|=</span> <span class="n">snLower</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="n">WORD</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">WORD</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">sn</span><span class="p">;</span>
</span><span class="line">     <span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&quot;%04x-%04x-%04x-%04x&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class="line"> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">小结</h2>

<p>IDA很强大，Crack很费时间，收获的免费SRS使用权和投入的大量时间不成正比。结论：以后还是尽量少搞Crack吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于异常和异常错误处理的思考]]></title>
    <link href="http://dahakawang.github.com/blog/2012/04/13/thoughts-on-exception-and-exception-handling/"/>
    <updated>2012-04-13T22:47:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2012/04/13/thoughts-on-exception-and-exception-handling</id>
    <content type="html"><![CDATA[<p>程序员们无时无刻不在于Bug和错误做着斗争。早在面向过程的C语言时代，错误一般是通过函数接口的返回值来指定的。我们事先对接口做好返回值约定，然后调用者根据约定内容检查调函数回值，从而得知了函数调用的结果。典型的约定，有比如返回NULL表示调用失败，有比如返回0表示成功其他表示各种错误原因等等。这种方式在当时看上去是个比较完美的解决方案，但是，随着程序的规模增大，这种方式日渐显出了疲态。</p>

<!-- more -->

<p>通过约定和检查返回值的方式检查错误，其结果是开发人员会将大量时间用于做返回值检查，这样程序逻辑里充斥着与主功能无关大量判断语句，这降低了代码的可读性。不仅如此，开发者往往疲于检测返回值，写出了一堆一堆冗长而又臃肿的代码。但是，这还不是最为严峻的挑战。请读者考虑一下这么一种场景，如果我们的某段代码调用了函数A，而函数A调用了30多个函数，每个函数定义了自己的返回值以指明特定错误，那么定义A的返回值将是一个大大的挑战。再试想一下，假设这30个函数又有更深入的调用链呢？看到问题了吧，随着程序抽象层系越高，为其设计返回值约定就越为困难，相对的要检查其返回值所需的代码就约为冗杂。</p>

<p>在我们疲于应付日渐臃肿的返回值约定的时候，伟大的计算机科学家们发明了异常这个好东西，它能在一定层次上缓解之前方法的问题。考虑之前的例子，当A函数调用的30个函数之一的下层某个函数发生错误时，它只是简单的抛出这个异常，这个异常不会再经手中间层次的函数而直接汇报给了A函数的调用者。于是乎，中间函数不需要再定义自己也难以维护的复杂的返回值约定，这大大减轻了设计者的工作量以及开发者的代码量。</p>

<p>那么异常抛出后，到底是由谁来处理呢？异常的设计哲学是，谁能处理谁处理。底层的接口检测到错误的发生，但它没有足够的上下文做出处理决定，因此只能通过向上汇报的方式来找人处理。底层函数的调用者往往知道如何对某个错误做出合适的处理。而且使用异常后，我们不再需要不断地检查函数返回值，只需要在catch语句里指明正确的处理方式即可。这样，程序的主逻辑和错误处理代码被泾渭分明的分离开来，增强了代码的可读性。</p>

<p>我们现在已经知道了异常的好处，那么我们该如何设计和使用异常呢？我的想法是，遵循“异常和错误分离”原则，注意我这里的异常和错误不是java中的概念。为了理解这个原则，我们首先思考一下为什么程序需要抛异常？很容易理解，我们之所以抛异常，是因为我们发觉程序运行时，我们对系统的各种状态的假设不能够被满足。比如我们发觉调用系统写文件失败了，又比如我们发觉某个传入对象参数是非法的null值。由于状态不满足我们的断言，所以本接口所承诺的功能将不能实现，于是乎我们需要汇报异常给上级，告诉它这件事儿我干不了了！但是，在考虑看看，究竟是那些因素造成了我们对系统状态的断言失败了呢？我认为有这三个原因：操作系统的、用户的、以及其他模块的。操作系统的原因就诸如读文件失败，访问网络失败等诸多问题；用户的原因包括误操作，错误的输入等情况；而其他模块的错误则是由于自己编程错误而造成的，它可能是本函数调用的函数有bug进而不能实现功能，也可能是本函数的调用者有bug进而传入了错误的数据。</p>

<p>正是由于这三类因素的存在，才使得我们最终不能完成我们的任务。但这与我的“异常和错误分离”原则有何关系呢？实际上，这里的“异常”即是指系统和用户的因素，这类因素属于不可控因素，但是绝大部分可以事先预见到的。既然是预先可以预见到，显然应该使用一个checked exception来直接标明，这体现了我们对系统和用户可能出现的错误有过预见性的思考，因此所有接口都需要显式地使用throws语句指明这些个异常。当然，使用checked exception会使得代码臃肿，但一方面由于这类异常随着程序规模的增大其数量增长较慢，且其种类较少，另一方面由于我们可以通过使用继承的层次结构抽象数量较多的具体异常，从而可以将checked exception数量抑制在可控范围内。而在“异常和错误分离”原则中，“错误”则是指系统中其他部件的错误。这类错误的特点是，它们都是因为程序编码有错误产生的，换句话说，正是因为本系统的其他构件有了bug，才使得我们调用某个函数产生了错误的结果，或者是我们被传入了一个非法的参数。由于编码bug数量众多且难以预测其种类，因此表达这类错误便适合于使用unchecked exception，在实现上我们使用一个RuntimeException并辅以相应信息就行了。</p>

<p>因此，所谓“异常和错误分离”即是指，“异常”我们用checked exception指出，而“错误”我们使用unchecked exception指明。</p>

<p>我们了解了怎样设计异常，下面我们来思考一下，作为被调用者和调用者，我们又该在异常处理方面做些什么。</p>

<p>首先作为被调用者，一个问题是，我们究竟需不需要检查参数的合法性。一种想法是，既然我是被自己系统其他模块调用的，那么我们有理由相信，如果其他模块工作正常的话，我将势必以一个正确的参数被调用，那么我再去检测传入参数的合法性还有意义么？我们把这个想法先放到一边，让我们再考虑一下，面向对象的基本思想。在面向对象的设计哲学里面，实际上所有的东西都是对象，对象是OO程序的基本功能构件，一个对象应该是一个完整的、稳定的实体，它不应该被外部错误的影响。这样看来，既然我们是以对象来看世界的，我们显然是不应该相信别的类，即是它是我们一个系统的。这样想来，我们着实需要对传入参数做出严格检查，然后在检查到错误时，抛出相应异常。现在我们知道，不检查参数，可以简化程序减少工作量，检查参数，可以增强程序构件的健壮性，也便于调试。我们究竟要不要检查这类错误，我想，完全需要你作为设计者，在工作量和程序健壮性、易调试性间取得一个良好的折中：对于一些处于系统内部的内，我们的检查相应的放松，而对于系统边界类，我们需要较为严格的检查。</p>

<p>话分两头，作为调用者，我们又该做些什么呢？我们既然以异常指明错误，那么是否意味着对于我们之前某函数返回null然后检测返回值是否为null的代码，都可以通过抛出异常、捕获异常来替代呢？我认为不是的。之前自己曾设计了一个getCurrentAccount接口，功能是返回当前用户的账号，并且我打算通过返回null表明用户尚没有设置当前账号。但我一直在思考，最后得出，这里显然还是不应该抛出异常，因为用户未设置当前帐户显然不属于错误啊。我们退一步再讲，无论如何，我们总需要一个判断语句指出当前是否有设置账号，所以即使使用了异常，在这里也不能发挥出其优势。因此，异常技术并不是将以前的返回值机制武断地替换掉，而是需要根据实际情况，判断这个情况是否是错误状态，然后再做决定是否采用异常机制。</p>

<p>前一段时间给团队里做设计十分苦逼，特别是希望让不同人实现代码时候能够让错误和异常得到有效控制。今儿整理了一下自己的思路，于是便有了此文，希望与大家共同探讨之。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【译】Android位图颜色模式的问题]]></title>
    <link href="http://dahakawang.github.com/blog/2012/03/03/android-bitmap-color-mode/"/>
    <updated>2012-03-03T20:02:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2012/03/03/android-bitmap-color-mode</id>
    <content type="html"><![CDATA[<p>最近开始了android上的编程之旅，在了解2D图形编程时，令人蛋疼的发觉android上仅支持ARGB8888、ARGB4444、RGB565以及Alpha 8这么几种颜色模式，而不支持RGB888这种格式。原本以为即使不支持RGB888我用ARGB8888总行吧，但后来了解到，即使我在内存中用ARGB888颜色模型表示图像，在该图像拷贝到屏幕帧缓冲区的过程中，它也会变成RGB565颜色模式。我们知道，RGB565最多只能表示2^16=65536种图像，这对于RGB888所能表示的2^24=16777216种颜色来说显然在表现力上要略逊一筹。这集中表现在显示某些带有渐变效果的图片时，出现了一条条的颜色带，而不是原始的平滑的渐变效果。后来得知android使用了Dither(抖动)这种技术，以欺骗人类眼球的方式加以补偿。</p>

<p>当然，以这个问题为出发点，后来又引发了诸多问题，而这篇文章解决了我不少问题，特在这里翻译出来供大家分享之。</p>

<!-- more -->

<hr />

<p>在学习AvoidXfermode类的时候，我遇到了图片颜色不能正确显示的问题。我画了一个平滑渐变的色谱图片，然后用AvoidXfermode的Target功能将替换该图片里一种颜色替换为另外的颜色。但问题是，我想要替换的颜色并没有按照我所预想的一样被AvoidXfermode替换掉。原来，我的PNG图片被自动从24位的RGB888颜色模式转换为了16位的RGB565颜色模式，这使得图片中颜色的原始数值被改变了。</p>

<p>现在市面上几乎所有的设备都是16位色的屏幕，这意味着不管你在代码里使用什么颜色格式的图片，在某个时候它们都会被转化为16位图片，这样它们才能被显示在屏幕上。这种转换会占用处理器资源，会以时间和电池寿命的形式给用户造成损失。所以，我们并不期望这种转换在绘图时会发生，相反的，我们希望它还要在尽可能早的阶段里被完成。Android是一个智能的系统，在有些情况下Android会自动帮你完成这些转换工作，所以你并不需要担心这些问题。在大部分情况下，这个特性是相当棒的，它大大减少了开发者的工作量，也减少你的资源大小同时节省了处理器时间和电池寿命。但是，如果你希望在程序里将图片以一种指定的颜色格式处理，这种自动转化机制会让你头大的。幸运的是，我们有办法阻止自动转换的发生，让你的图片以你期望的颜色格式储存。</p>

<p>不过，既然这种自动转换既节省内存和处理器时间又保护电池寿命，那么为什么有人会不希望这种转换发生呢？Android程序中大部分的图片都只需要简单的载入并显示就行了。但是在一些教程以及我之前提到的例子中，我们需要在图片显示之前对它们做一些操作。为了得到最佳的效果，我们希望载入的图片在处理时尽能可能的保持最好的质量，因为在处理过程中过早的降低质量将对最终效果造成不良影响。</p>

<p>好了，这就是说在图片处理好之前，我们不希望被Android横插一脚。但是，Android系统将在什么时候替我们执行这些转换呢?答案是转换将在3个地方发生：</p>

<ul>
  <li>编译时图片资源被编译到软件包里去时</li>
  <li>当图片被从资源中载入为Bitmap时</li>
  <li>当图片被绘制时</li>
</ul>

<p>我们将看看这三类情况，并且了解如何避免这些转换。</p>

<h2 id="section">程序编译时</h2>

<p>当你在项目“res/drawable”文件夹下放置图片的时候，意味着你告诉Android：如果需要的话，在构建程序的时候将图片转换为16位图片。该转换发生的必要条件有哪些？无论你图片的原始格式是什么，如果你的图片没有alpha通道，在你的软件构建的时候Android会将它转换为本地16位色图。你有两种方法组织转换发生：</p>

<ul>
  <li>给图片添加alpha通道</li>
  <li>将图片放置到“res/raw”目录下而不是“res/drawable”</li>
</ul>

<p>通过给图片添加alpha通道，Android将不会尝试将图片转换为16位色图，这是因为RGB565颜色模式不带alpha通道。将一张带有alpha通道的图片转换为RGB565颜色格式会使半透明信息丢失，所以任何带有alpha通道的图片将被储存为32位的ARGB8888图片资源。通过将图片放置到“res/raw”目录下,我们告诉Android这个资源包含原始数据，它不应该在构建时更改。所以，对于我们放置到该目录下的任何图片都不会发生自动转换。但不幸的是，如果我们放在raw目录下的图片不带有alpha通道的话，这个方法还是有问题。这个问题在我们载入图片时显露了出来：</p>

<h2 id="section-1">图片载入时</h2>

<p>当使用BitmapFactory从你程序的资源中载入一张图片时，同样的自动转换机制会发生。如果你要载入的图片没有alpha通道，Android会将其转换为16位RGB565图片。不幸的是，即使我们将图片放置在“res/raw”目录下，这种转换依然会发生。根据在这个<a href="http://groups.google.com/group/android-developers/browse_thread/thread/8b1abdbe881f9f71">帖子</a>里一个叫<a href="http://www.curious-creature.org/">Romain Guy</a>的Android开发者所说，有一个解决之道：</p>

<blockquote>
  <p>“你需要做的就是将图片直接载入为ARGB888模式。当你调用
BitmapFactory.decode*()的某一个重载方法时，你能够指定一系列的
BitmapFactory.Option对象。你需要将Option对象中的inDither设置为false。这
样将会使BitmapFactory不去尝试将24位色图转换为16位色图。”</p>
</blockquote>

<p>当时，我发觉<strong>这个方法不起作用</strong>，至少在Android 1.6下都不起作用。传入一系列参数使得inDither为false的确使得图片不被抖动（Dither）处理，但是这种方法并不能阻止颜色模式的转换。图片依然会被转换成16位的RGB565，这将会使得转换后的渐变图片出现颜色条带的现象。</p>

<p>既然这个推荐的解决方案并不能满足我们的要求，那么在这个过程中唯一能保持你图片原貌的方法就是让你的图片带上alpha通道。当BitmapFactory发觉图片资源带有alpha通道，它便只能将图片解码为32位的ARGB888位图。</p>

<h2 id="section-2">绘制时</h2>

<p>假设我们有两张图片。图片A是ARGB888位图，图片B是RGB565位图。如果我们敬爱那个图片A绘制到B上，那么图片A将需要被转换为B的颜色格式。辛运的是，这种转换是由Canvas的drawBitmap方法替我们包办了。这对我们来说是个好消息，因为这正是我们想要的。在我们要释放位图资源的时候，我们已经完成调整和操作图片，并且图片将被转换和显示。然而，由于我们从32位转换为16位颜色深度，这将会造成图像的失真。为了减小失真对图片的影响，我们能够控制将图片从32位转换为16位的时机。当将一个高色深的图片绘制到第色深的图片上时，默认是不会进行抖动处理的。对于包含渐变的图片而言，这会使得图片出现众所周知的“色带”问题，这是非常难看的。为了克服这个问题，我们需要告诉Android我们想要对结果进行抖动处理。抖动是这么一种处理，它将原始颜色做出一些改变，以骗过我们的眼睛，让我们在低色深图片中以为自己看到了一个平滑的渐变。</p>

<p><strong>需要记住的是，当我们处理图片的时候，图片必须总是32位ARGB8888模式。</strong>只有当我们完成处理图片后，他们才应该被转换成16位色的图片。由于任何不带alpha通道的图片，再被BitmapFactory载入的时候将被转换为RGB565，不管它们是在”res/drawable”还是在”res/raw”目录下。而确保他们被解码为32色ARGB8888的唯一手段就是保证你的图片带有alpha通道。</p>

<h2 id="section-3">例子</h2>

<p>为了证明我所说，然我们做一个简单的测试。首先让我们写一个载入并以默认option显示两张图片的activity。两张图片都是平滑渐变的色谱，但是他们将被保存为不同的格式。第一张图将被保存为24位色RGB888的PNG图，第二张图片被保存为32位带有alpha通道的ARGB8888的PNG图片。两张图片有着完全一致的颜色数据，惟一的区别是一张带有alpha通道而另一张没有。保存两张图片，并把他们放置到你项目的”res/raw”目录下。然后，在你的activity中使用下列代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">       <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Load both of our images from our application&#39;s resources.</span>
</span><span class="line">      <span class="n">Resources</span> <span class="n">r</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">();</span>
</span><span class="line">      <span class="n">Bitmap</span> <span class="n">resource</span><span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">raw</span><span class="o">.</span><span class="na">spectrum_gray_nodither_</span><span class="o">;</span>
</span><span class="line">      <span class="n">Bitmap</span> <span class="n">resource</span><span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">raw</span><span class="o">.</span><span class="na">spectrum_gray_nodither_</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Print some log statements to show what pixel format these images were decoded with.</span>
</span><span class="line">      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;FormatTest&quot;</span><span class="o">,</span><span class="s">&quot;Resource &quot;</span> <span class="o">+</span> <span class="n">resourcegetConfig</span><span class="o">());</span> <span class="c1">// Resource RGB_</span>
</span><span class="line">      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;FormatTest&quot;</span><span class="o">,</span><span class="s">&quot;Resource &quot;</span> <span class="o">+</span> <span class="n">resourcegetConfig</span><span class="o">());</span> <span class="c1">// Resource ARGB_8</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create two image views to show these bitmaps in.</span>
</span><span class="line">      <span class="n">ImageView</span> <span class="n">image</span><span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">      <span class="n">ImageView</span> <span class="n">image</span><span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">      <span class="n">imagesetImageBitmap</span><span class="o">(</span><span class="n">resource</span><span class="o">;</span>
</span><span class="line">      <span class="n">imagesetImageBitmap</span><span class="o">(</span><span class="n">resource</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">      <span class="c1">// Create a simple layout to show these two image views side-by-side.</span>
</span><span class="line">      <span class="n">LayoutParams</span> <span class="n">wrap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LayoutParams</span><span class="o">(</span><span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">,</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">);</span>
</span><span class="line">      <span class="n">LayoutParams</span> <span class="n">fill</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LayoutParams</span><span class="o">(</span><span class="n">LayoutParams</span><span class="o">.</span><span class="na">FILL_PARENT</span><span class="o">,</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">FILL_PARENT</span><span class="o">);</span>
</span><span class="line">      <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">params</span><span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">wrap</span><span class="o">);</span>
</span><span class="line">      <span class="n">paramsaddRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">CENTER_VERTICAL</span><span class="o">);</span>
</span><span class="line">      <span class="n">paramsaddRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">ALIGN_PARENT_LEFT</span><span class="o">);</span>
</span><span class="line">      <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">params</span><span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">wrap</span><span class="o">);</span>
</span><span class="line">      <span class="n">paramsaddRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">CENTER_VERTICAL</span><span class="o">);</span>
</span><span class="line">      <span class="n">paramsaddRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">ALIGN_PARENT_RIGHT</span><span class="o">);</span>
</span><span class="line">      <span class="n">RelativeLayout</span> <span class="n">layout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">      <span class="n">layout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">image</span> <span class="n">params</span><span class="o">;</span>
</span><span class="line">      <span class="n">layout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">image</span> <span class="n">params</span><span class="o">;</span>
</span><span class="line">      <span class="n">layout</span><span class="o">.</span><span class="na">setBackgroundColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Show this layout in our activity.</span>
</span><span class="line">      <span class="n">setContentView</span><span class="o">(</span><span class="n">layout</span><span class="o">,</span> <span class="n">fill</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译此项目并将它部署到你的设备上查看结果。我们看到24位色图片在左边，为32位色图片在右边。但是等一下！32位的图片看上去有一些色带出现，然而24位图片看上去却很平滑。到底是怎么了？让我们仔细看看图片，我们能发现：</p>

<p><img src="http://dahakawang.github.com/images/blogs/2012/original_image.png" alt="" /></p>

<p>仔细检查后，我们发觉24位图被抖动处理了，而32位色图没有。考虑到对于任何显示到Android设备屏幕的图片，都将被转换为16位色格式，所以这两张图都将发生这个转换。由于24位色图不带有alpha通道，并且它被放置在”res/raw”目录下，所以它将在我们载入activity中的资源时被自动转换为16位色图。我们能通过检查Logcat里的消息来验证这一点。我们从BitmapFactory里得到的Bitmap对象实际上是RGB565格式的，而BitmapFactory足够聪明会帮我们抖动处理图片。而我们带有alpha通道的的32位色图，则被载入为了ARGB8888位图。在该图片对应的ImageView被绘制到屏幕时，它将被转换为本地16位色格式。这里我们看到的是绘制时发生的转换不会进行抖动处理。让我们看一下，如果我们指明转换时进行抖动处理，情况是否会好一些。在上例中19行添加如下几行代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">// Enable dithering when our 32-bit image gets drawn.</span>
</span><span class="line"><span class="n">Drawable</span> <span class="n">drawable32</span> <span class="o">=</span> <span class="n">image32</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">();</span>
</span><span class="line"><span class="n">drawable32</span><span class="o">.</span><span class="na">setDither</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译后上传至设备然后查看结果：</p>

<p><img src="http://dahakawang.github.com/images/blogs/2012/after_compiled.png" alt="" /></p>

<p>啊，好了。现在我们的32位图也已经被抖动处理好了。这里我们简单地告诉ImageView我们想要Bitmap被被绘制时进行抖动处理。不幸的是这将影响绘图速度，所以这并非一个理想的解决方案。但我们能够消除这个性能问题，通过在我们将图片送至ImageView之前预先进行抖动处理：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line"> <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Load both of our images from our application&#39;s resources.</span>
</span><span class="line"> <span class="n">Resources</span> <span class="n">r</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">();</span>
</span><span class="line"> <span class="n">Bitmap</span> <span class="n">resource24</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">raw</span><span class="o">.</span><span class="na">spectrum_gray_nodither_24</span><span class="o">);</span>
</span><span class="line"> <span class="n">Bitmap</span> <span class="n">resource32</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">raw</span><span class="o">.</span><span class="na">spectrum_gray_nodither_32</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Print some log statements to show what pixel format these images were decoded with.</span>
</span><span class="line"> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;FormatTest&quot;</span><span class="o">,</span><span class="s">&quot;Resource24: &quot;</span> <span class="o">+</span> <span class="n">resource24</span><span class="o">.</span><span class="na">getConfig</span><span class="o">());</span> <span class="c1">// Resource24: RGB_565</span>
</span><span class="line"> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;FormatTest&quot;</span><span class="o">,</span><span class="s">&quot;Resource32: &quot;</span> <span class="o">+</span> <span class="n">resource32</span><span class="o">.</span><span class="na">getConfig</span><span class="o">());</span> <span class="c1">// Resource32: ARGB_8888</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Save the dimensions of these images.</span>
</span><span class="line"> <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">resource24</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span><span class="line"> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">resource24</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a 16-bit RGB565 bitmap that we will draw our 32-bit image to with dithering.</span>
</span><span class="line"> <span class="n">Bitmap</span> <span class="n">final32</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">Config</span><span class="o">.</span><span class="na">RGB_565</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a new paint object we will use to draw our bitmap with. This is how we tell</span>
</span><span class="line"> <span class="c1">// Android that we want to dither the 32-bit image when it gets drawn to our 16-bit final</span>
</span><span class="line"> <span class="c1">// bitmap.</span>
</span><span class="line"> <span class="n">Paint</span> <span class="n">ditherPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class="line"> <span class="n">ditherPaint</span><span class="o">.</span><span class="na">setDither</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a new canvas for our 16-bit final bitmap, and draw our 32-bit image to it with</span>
</span><span class="line"> <span class="c1">// the paint object we just created.</span>
</span><span class="line"> <span class="n">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Canvas</span><span class="o">();</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">setBitmap</span><span class="o">(</span><span class="n">final32</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">resource32</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">ditherPaint</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create two image views to show these bitmaps in.</span>
</span><span class="line"> <span class="n">ImageView</span> <span class="n">image24</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line"> <span class="n">ImageView</span> <span class="n">image32</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line"> <span class="n">image24</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">resource24</span><span class="o">);</span>
</span><span class="line"> <span class="n">image32</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">final32</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a simple layout to show these two image views side-by-side.</span>
</span><span class="line"> <span class="n">LayoutParams</span> <span class="n">wrap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LayoutParams</span><span class="o">(</span><span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">,</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">);</span>
</span><span class="line"> <span class="n">LayoutParams</span> <span class="n">fill</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LayoutParams</span><span class="o">(</span><span class="n">LayoutParams</span><span class="o">.</span><span class="na">FILL_PARENT</span><span class="o">,</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">FILL_PARENT</span><span class="o">);</span>
</span><span class="line"> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">params24</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">wrap</span><span class="o">);</span>
</span><span class="line"> <span class="n">params24</span><span class="o">.</span><span class="na">addRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">CENTER_VERTICAL</span><span class="o">);</span>
</span><span class="line"> <span class="n">params24</span><span class="o">.</span><span class="na">addRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">ALIGN_PARENT_LEFT</span><span class="o">);</span>
</span><span class="line"> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">params32</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">wrap</span><span class="o">);</span>
</span><span class="line"> <span class="n">params32</span><span class="o">.</span><span class="na">addRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">CENTER_VERTICAL</span><span class="o">);</span>
</span><span class="line"> <span class="n">params32</span><span class="o">.</span><span class="na">addRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">ALIGN_PARENT_RIGHT</span><span class="o">);</span>
</span><span class="line"> <span class="n">RelativeLayout</span> <span class="n">layout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line"> <span class="n">layout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">image24</span><span class="o">,</span> <span class="n">params24</span><span class="o">);</span>
</span><span class="line"> <span class="n">layout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">image32</span><span class="o">,</span> <span class="n">params32</span><span class="o">);</span>
</span><span class="line"> <span class="n">layout</span><span class="o">.</span><span class="na">setBackgroundColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Show this layout in our activity.</span>
</span><span class="line"> <span class="n">setContentView</span><span class="o">(</span><span class="n">layout</span><span class="o">,</span> <span class="n">fill</span><span class="o">);</span>
</span><span class="line"> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行这段代码将会产生之前一样的效果，但是通过提前抖动处理，我们避免了性能瓶颈。如果你只是简单地载入和显示你的图片到你的activity一次，这种处理并不是必要的。但是如果需要频繁地绘制，则需要提前抖动处理以避免浪费处理时间和电池寿命。</p>

<p>这时候你可能会想了，为什么我们要做那么多额外的工作来确保我们的图片被解码为32位色图像，然而其结果却只是还要在我们绘图时做更多的工作来确保图片被抖动处理了呢？既然24位色被自动转换为了效果不错的16位色图而不需要你的任何干预，那么我们使用32位色图的理由是什么呢？实际上，对于上面的例子，我们还没有对这些位图做任何的处理和操作，所以被自动转换的24位色图片看上去和我们手动转换的32位色图片效果一样。他们最终都有着一样的像素数据。但是若是我们想要在显示之前对图片进行一些处理呢？咱们先试试看。在你的设备上运行下述代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line"> <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Load both of our images from our application&#39;s resources.</span>
</span><span class="line"> <span class="n">Resources</span> <span class="n">r</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">();</span>
</span><span class="line"> <span class="n">Bitmap</span> <span class="n">resource24</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">raw</span><span class="o">.</span><span class="na">spectrum_gray_nodither_24</span><span class="o">);</span>
</span><span class="line"> <span class="n">Bitmap</span> <span class="n">resource32</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">raw</span><span class="o">.</span><span class="na">spectrum_gray_dithered_32</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;FormatTest&quot;</span><span class="o">,</span><span class="s">&quot;Resource24: &quot;</span> <span class="o">+</span> <span class="n">resource24</span><span class="o">.</span><span class="na">getConfig</span><span class="o">());</span> <span class="c1">// Resource24: RGB_565</span>
</span><span class="line"> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;FormatTest&quot;</span><span class="o">,</span><span class="s">&quot;Resource32: &quot;</span> <span class="o">+</span> <span class="n">resource32</span><span class="o">.</span><span class="na">getConfig</span><span class="o">());</span> <span class="c1">// Resource32: ARGB_8888</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Sadly, the images we have decoded from our resources are immutable. Since we want to</span>
</span><span class="line"> <span class="c1">// change them, we need to copy them into new mutable bitmaps, giving each of them the same</span>
</span><span class="line"> <span class="c1">// pixel format as their source.</span>
</span><span class="line"> <span class="n">Bitmap</span> <span class="n">bitmap24</span> <span class="o">=</span> <span class="n">resource24</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">resource24</span><span class="o">.</span><span class="na">getConfig</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line"> <span class="n">Bitmap</span> <span class="n">bitmap32</span> <span class="o">=</span> <span class="n">resource32</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">resource32</span><span class="o">.</span><span class="na">getConfig</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Save the dimensions of these images.</span>
</span><span class="line"> <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">bitmap24</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span><span class="line"> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">bitmap24</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a new paint object that we will use to manipulate our images. This will tell</span>
</span><span class="line"> <span class="c1">// Android that we want to replace any color in our image that is even remotely similar to</span>
</span><span class="line"> <span class="c1">// 0xFF307070 (a dark teal) with 0xFF000000 (black).</span>
</span><span class="line"> <span class="n">Paint</span> <span class="n">avoid1Paint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class="line"> <span class="n">avoid1Paint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="mh">0xFF000000</span><span class="o">);</span>
</span><span class="line"> <span class="n">avoid1Paint</span><span class="o">.</span><span class="na">setXfermode</span><span class="o">(</span><span class="k">new</span> <span class="n">AvoidXfermode</span><span class="o">(</span><span class="mh">0xFF307070</span><span class="o">,</span> <span class="mi">255</span><span class="o">,</span> <span class="n">AvoidXfermode</span><span class="o">.</span><span class="na">Mode</span><span class="o">.</span><span class="na">TARGET</span><span class="o">));</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Make another paint object, but this one will replace any color that is similar to a</span>
</span><span class="line"> <span class="c1">// 0xFF00C000 (green) with 0xFF0070D0 (skyish blue) instead.</span>
</span><span class="line"> <span class="n">Paint</span> <span class="n">avoid2Paint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class="line"> <span class="n">avoid2Paint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="mh">0xFF0070D0</span><span class="o">);</span>
</span><span class="line"> <span class="n">avoid2Paint</span><span class="o">.</span><span class="na">setXfermode</span><span class="o">(</span><span class="k">new</span> <span class="n">AvoidXfermode</span><span class="o">(</span><span class="mh">0xFF00C000</span><span class="o">,</span> <span class="mi">245</span><span class="o">,</span> <span class="n">AvoidXfermode</span><span class="o">.</span><span class="na">Mode</span><span class="o">.</span><span class="na">TARGET</span><span class="o">));</span>
</span><span class="line">
</span><span class="line"> <span class="n">Paint</span> <span class="n">fadePaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class="line"> <span class="kt">int</span><span class="o">[]</span> <span class="n">fadeColors</span> <span class="o">=</span> <span class="o">{</span><span class="mh">0x00000000</span><span class="o">,</span> <span class="mh">0xFF000000</span><span class="o">,</span> <span class="mh">0xFF000000</span><span class="o">,</span> <span class="mh">0x00000000</span><span class="o">};</span>
</span><span class="line"> <span class="n">fadePaint</span><span class="o">.</span><span class="na">setShader</span><span class="o">(</span><span class="k">new</span> <span class="n">LinearGradient</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">fadeColors</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class="line"> <span class="n">LinearGradient</span><span class="o">.</span><span class="na">TileMode</span><span class="o">.</span><span class="na">CLAMP</span><span class="o">));</span>
</span><span class="line"> <span class="n">fadePaint</span><span class="o">.</span><span class="na">setXfermode</span><span class="o">(</span><span class="k">new</span> <span class="n">PorterDuffXfermode</span><span class="o">(</span><span class="n">PorterDuff</span><span class="o">.</span><span class="na">Mode</span><span class="o">.</span><span class="na">DST_IN</span><span class="o">));</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a new canvas for our bitmaps, and draw a full-sized rectangle to each of them</span>
</span><span class="line"> <span class="c1">// which will apply the paint object we just created.</span>
</span><span class="line"> <span class="n">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Canvas</span><span class="o">();</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">setBitmap</span><span class="o">(</span><span class="n">bitmap24</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">avoid1Paint</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">avoid2Paint</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">fadePaint</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">setBitmap</span><span class="o">(</span><span class="n">bitmap32</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">avoid1Paint</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">avoid2Paint</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">fadePaint</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a 16-bit RGB565 bitmap that we will draw our 32-bit image to with dithering. We</span>
</span><span class="line"> <span class="c1">// only need to do this for our 32-bit image, and not our 24-bit image, because it is</span>
</span><span class="line"> <span class="c1">// already in the RGB565 format.</span>
</span><span class="line"> <span class="n">Bitmap</span> <span class="n">final32</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">Config</span><span class="o">.</span><span class="na">RGB_565</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a new paint object that we will use to draw our bitmap with. This is how we tell</span>
</span><span class="line"> <span class="c1">// Android that we want to dither the 32-bit image when it gets drawn to our 16-bit final</span>
</span><span class="line"> <span class="c1">// bitmap.</span>
</span><span class="line"> <span class="n">Paint</span> <span class="n">ditherPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class="line"> <span class="n">ditherPaint</span><span class="o">.</span><span class="na">setDither</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Using our canvas from above, draw our 32-bit image to it with the paint object we just</span>
</span><span class="line"> <span class="c1">// created.</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">setBitmap</span><span class="o">(</span><span class="n">final32</span><span class="o">);</span>
</span><span class="line"> <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">bitmap32</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">ditherPaint</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create two image views to show these bitmaps in.</span>
</span><span class="line"> <span class="n">ImageView</span> <span class="n">image24</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line"> <span class="n">ImageView</span> <span class="n">image32</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line"> <span class="n">image24</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap24</span><span class="o">);</span>
</span><span class="line"> <span class="n">image32</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">final32</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Create a simple layout to show these two image views side-by-side.</span>
</span><span class="line"> <span class="n">LayoutParams</span> <span class="n">wrap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LayoutParams</span><span class="o">(</span><span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">,</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">);</span>
</span><span class="line"> <span class="n">LayoutParams</span> <span class="n">fill</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LayoutParams</span><span class="o">(</span><span class="n">LayoutParams</span><span class="o">.</span><span class="na">FILL_PARENT</span><span class="o">,</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">FILL_PARENT</span><span class="o">);</span>
</span><span class="line"> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">params24</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">wrap</span><span class="o">);</span>
</span><span class="line"> <span class="n">params24</span><span class="o">.</span><span class="na">addRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">CENTER_VERTICAL</span><span class="o">);</span>
</span><span class="line"> <span class="n">params24</span><span class="o">.</span><span class="na">addRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">ALIGN_PARENT_LEFT</span><span class="o">);</span>
</span><span class="line"> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">params32</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">wrap</span><span class="o">);</span>
</span><span class="line"> <span class="n">params32</span><span class="o">.</span><span class="na">addRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">CENTER_VERTICAL</span><span class="o">);</span>
</span><span class="line"> <span class="n">params32</span><span class="o">.</span><span class="na">addRule</span><span class="o">(</span><span class="n">RelativeLayout</span><span class="o">.</span><span class="na">ALIGN_PARENT_RIGHT</span><span class="o">);</span>
</span><span class="line"> <span class="n">RelativeLayout</span> <span class="n">layout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RelativeLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line"> <span class="n">layout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">image24</span><span class="o">,</span> <span class="n">params24</span><span class="o">);</span>
</span><span class="line"> <span class="n">layout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">image32</span><span class="o">,</span> <span class="n">params32</span><span class="o">);</span>
</span><span class="line"> <span class="n">layout</span><span class="o">.</span><span class="na">setBackgroundColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// Show this layout in our activity.</span>
</span><span class="line"> <span class="n">setContentView</span><span class="o">(</span><span class="n">layout</span><span class="o">,</span> <span class="n">fill</span><span class="o">);</span>
</span><span class="line"> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里我们载入了和之前例子一样的图片，但我们现在使用Android内置的图形函数对他们预先进行了一些处理，而不是直接将它们添加到ImageView中显示。我们在显示两张图片前分别将它们都使用了三个不同的滤镜进行处理。要是你不明白23-52行代码是干嘛的，别担心，我会在以后的文章中详尽的介绍它们。而对于现在而言，你只需要知道我们的原始图片在运行时被我们的程序进行了巨大的变换。下图是最终的效果：</p>

<p><img src="http://dahakawang.github.com/images/blogs/2012/final_image.png" alt="" /></p>

<p>正如你所看到的，在经过了许多操作后，24位色图有了巨大的失真，而32位色图的效果则依然很不错。除了”条带”和失真，你可以发现24位色图的颜色根本都不正确。那么，为什么24位色图会出现这种现象而32位色图却没有呢？原因就在于24位色图被Android自动转换为了RGB565格式图像。一张16位色图片仅能够显示65,535种不同颜色，而32位色图却能够显示16,777,215种颜色，还带有255级半透明效果。这意味着当我们处理16位色图时，处理过后的颜色不能够被16位色所支持的65,535种颜色精确地表示出来。所以处理后的颜色被截取到了最临近相似的颜色值去了。每次我们对图片进行操作时，这种截取都会发生，所以图片将变得更加不精确。而当时用32位色时，这种现象虽然依然会有，但是由于有着将近17兆的颜色可以表示，这种副作用对于大部分程序来说将可以被忽略。</p>

<p>我希望我的这篇文章能帮到各位。我希望各位能从我的文章中学会的主要思想是：</p>

<ol>
  <li>要意识到Android的自动图片转换和抖动处理机制。当事情不照你所想发展时，知道Android是如何储存、载入以及绘制你的图像的话将大大减轻你的头痛。</li>
  <li>如果你要对你的图像被载入后进行任何的处理，确保你的图片是ARGB8888格式的。</li>
  <li>通过使用某种图形处理软件将你的图像保存为32位带alpha通道的PNG图片，你可以强制这张图片被载入为32位色。</li>
  <li>当你处理完你的32位色图片后，记得启用抖动处理后再将该图片转换为16位RGB565色图。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Condition Variable为什么需要一个Mutex的思考]]></title>
    <link href="http://dahakawang.github.com/blog/2012/02/19/why-condition-variable-need-a-mutex/"/>
    <updated>2012-02-19T23:37:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2012/02/19/why-condition-variable-need-a-mutex</id>
    <content type="html"><![CDATA[<ol>
  <li>Linux下：</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line"><span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line"><span class="n">doSomething</span><span class="p">();</span>
</span><span class="line"><span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<ol>
  <li>java里：</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">){</span>
</span><span class="line">    <span class="n">wait</span><span class="o">();</span>
</span><span class="line">    <span class="n">doSomething</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>C#里：</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c#"><span class="line"><span class="n">monitor</span><span class="p">.</span><span class="n">Enter</span><span class="p">();</span>
</span><span class="line"><span class="n">monitor</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
</span><span class="line"><span class="n">doSomething</span><span class="p">();</span>
</span><span class="line"><span class="n">monitor</span><span class="p">.</span><span class="n">Exit</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>使用Win32API</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">EnterCriticalSection</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">cs</span><span class="p">);</span>
</span><span class="line"><span class="n">SleepConditionVariableCS</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">cs</span><span class="p">,</span> <span class="n">INFINITE</span><span class="p">);</span>
</span><span class="line"><span class="n">doSomething</span><span class="p">();</span>
</span><span class="line"><span class="n">LeaveCriticalSection</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">cs</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不难看到，不管是哪种语言，不论使用什么程序库，无论在windows下亦或是Linux下，condition variable这个东西的用法似乎都是固定的：必须和一把锁搭配使用。</p>

<p>可是，问题是为什么这些库、框架、系统的设计者，在设计这套机制的时候，非要让我们好死不死再和一把锁一块儿使用呢？做这种费力不讨好的事儿，到底是因为历史原因，还是另有深意呢？</p>

<p>为了回答这个问题，首先考虑这么一个生产者消费者的场景。生产者会生产数据将其放到dataHandler对象中，然后向消费者发送一条消息。消费者也有dataHandler示例的句柄，并且在接收到生产者的消息后，它将通过dataHandler.getData()来获取数据。假设这个世界上的condition variable全是没有mutex机制的，则消费者的实现代码可能是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">bDataReady</span><span class="p">){</span>
</span><span class="line">     <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sigDataReady</span><span class="p">);</span> <span class="c1">//根据假设，我们现在不需要锁了</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="n">dataHandler</span><span class="p">.</span><span class="n">getData</span><span class="p">();</span>
</span><span class="line"><span class="n">dataHandler</span><span class="p">.</span><span class="n">releaseData</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>代码的逻辑十分简单。但是，现在我们考虑一下，如果有以下执行顺序：</p>

<ul>
  <li>消费者：检查bDataReady不为真</li>
  <li>生产者：设置bDataReady为true</li>
  <li>生产者：发送消息</li>
  <li>消费者：等待condition variable</li>
</ul>

<p>这时，虽然生产者通知了资源的可用，但由于这时候消费者尚未开始等待消息，也就没能接收到这个消息，于是只能在消息消失后无尽地等待下去。另一方面，由于消费者一直的等待，导致资源不被消费，在糟糕的情况下生产者会等待消费者消费完毕。于是乎，死锁发生了。</p>

<p>思考一下，为什么会发生死锁呢？其本质的原因在于生产者、消费者的行为没有保证原子性(Atomic)。这时候，我们要问了，既然pthread_cond_wait是系统级别的同步互斥工具，它怎么会不能保证原子性？当然，我并非指这个意义上的原子性。我们首先要知道condition variable的设计意图，实际上condition variable描述这么一种情景：在这个情境中，有一个人在等待一个特定事件，而另一个人会在该事件发生时告知前者。但是，condition variable本身只实现这么一种机制，它并不指出到底是什么事件发生了。因此，往往我们在等待成功，知道有事件发生的话，还需要额外代码来判断是哪个事件。注意，这就是整个问题的关键点：</p>

<p>实际上我们在使用condition variable时，不仅要通condition variable实现通知和被通知，还要自行实现通知和被通知前后所必要的判断、处理等业务逻辑，这才是condition variable的使用模型。知道这个后，我们就能理解为什么上面的情景会出问题了。原因在于消费者的基本行为没有确保原子性，它的判断和等待被分隔了。</p>

<p>我们当然可以争辩道，即使不通过和mutex合作，我们一样能使用这个假想的condition variable很好的完成功能。是的，我承认作为程序员你可以足够聪明和小心，以至于你实现的版本没有我上面这段代码的问题。但是，这难道不和你去跟设计mutex的人争辩说你明明可以自己通过精心设计实现互斥，根本不用mutex横插一脚这件事一样愚蠢且毫无意义么？谁也不能阻止你选择使用自己的办法，但是问题的关键是，我们需要一种有经过理论证明研究过的可靠的、统一的方法，因为软件开发在大部分情况下是一门工程，而不是一门任你发挥的艺术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World程序背后的故事解密（二）—— 程序之生]]></title>
    <link href="http://dahakawang.github.com/blog/2011/10/19/how-a-program-is-born/"/>
    <updated>2011-10-19T16:03:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2011/10/19/how-a-program-is-born</id>
    <content type="html"><![CDATA[<p>近几个月实在是太忙了，偶然想起来博客上一看，离上次写文章居然过了两个月有余，于是手痒痒想加把劲，再码点儿技术文上来^_^</p>

<p>这个系列是为了挖掘出一个简单的类似Hello World程序隐藏在CRT之下的复杂性，因此在上次分析了“编译器选项和CRT”之后，今天我想再来简单分析一下从程序进程建立直到程序运行到C/C++入口函数处发生的那点儿事儿。</p>

<!-- more -->

<p>我们知道，在Windows下一个进程是使用CreateProcess函数创建的，这个函数调用的成功，标志着有一个程序被加载至内存并准备开始运行了。系统在建立进程时，会完成给进程分配资源，初始化进程的内存空间，初始化进程内核对象，初始化进程环境快（PEB），加载PE映像文件，初始化全局堆，载入DLL等等工作，但是这些工作完成后却并不代表我们的程序已经开始执行了。这是因为进程本身是有“惰性”的，它不会主动执行代码，所以操作系统这时候会建立我们程序的第一个线程，而我们的代码将从这个线程来开始执行。</p>

<p>既然我们讨论“开始执行”，那么本文将不会涉及CreateProcess的原理以及系统建立进程的细节。我们将从线程的建立开始，来讨论我们的主题。</p>

<p>我们且不谈系统提供的给我们使用的CreateThread等函数，首先我们需要知道的是实际上一个线程的建立最终是由NtCreateThreadEx函数实现的，而这个函数则是将58作为调用号传入EAX然后直接使用sysenter指令陷入内核，从而使得线程能够最终建立。NtCreateThreadEx是一个没有被微软公布的函数，由ntdll.dll文件导出。如果你有兴趣可以去网上搜索该函数的原型，但注意由于它并是不公开的函数，所以网上所述的原型不一定正确，并且微软也不会保证今后这个接口不会改变。</p>

<p>内核在接收到新建线程的请求后就会替我们着手新建一个线程，并且为该线程初始化一些参数（包括TEB等），最终将线程的入口设置为RtlUserThreadStart函数，该函数是由ntdll.dll导出的。RtlUserThreadStart的主要工作就是建立SHE的异常处理函数链，它有两个参数，其中一个是用户之前指定的线程入口函数，另一个是传给该入口的参数。注意虽然RtlUserThreadStart有两个参数，但这并不意味着曾经有人调用过它并且给它传参了，这两个参数实际上这是操作系统硬性写入的两个值。我们必须知道，实际上RtlUserThreadStart的执行只是因为操作系统把该线程EIP硬性设置到了RtlUserThreadStart的入口处而已。</p>

<p>RtlUserThreadStart会调用BaseThreadInitThunk函数，这个函数是由kernel.dll导出的，它主要将用户指定的参数压栈，接着就直接调用用户指定的线程入口函数了。</p>

<p>至此，一个线程全面建立！</p>

<p>当然，如果这个线程是主线程的话，情况有些不同。因为这时候BaseThreadInitThunk调用的可还不会是你的main或WinMain函数，它将调用PE文件中指定的入口函数，如果是VC编译的程序这个入口将是mainCRTStartup函数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一款宽带拨号器加密算法逆向实例]]></title>
    <link href="http://dahakawang.github.com/blog/2011/08/06/a-dialer-cracked/"/>
    <updated>2011-08-06T14:24:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2011/08/06/a-dialer-cracked</id>
    <content type="html"><![CDATA[<p>这两天闲来无事，想起来许久之前曾答应朋友试着分析一下这个拨号器加密方式，花了几天时间分析，于是有了本文。下面将描述加密过程的技术细节，以及一些破解的心得。</p>

<p>首先，该拨号器存在三个平台的三个版本，但鉴于Windows下拨号过程需经过两次麻烦的握手（一次失败拨号，获取失败的返回值并参与第二次加密过程，从而最终生成密文），我最终选择了Linux版本来进行分析。</p>

<!-- more -->

<p>将拿到手的拨号器用IDA打开分析一下，发觉程序大部分数据都是不可识别的，整个程序只有一个段，且整个段是可读写执行的。这显然表明程序是加壳了的，只能动跟了。于是在虚拟机里跑一个ubuntu，在宿主机器上通过IDA对ubuntu里的拨号器进行远程调试。根据stack balance原则，我在一开始的esp处下硬件断点，当程序被断下来后再跑了几步就到了真正的OEP处了。不过这样很麻烦，每次都要大费周章才能找到OEP，但是苦于Linux下不知如何dump出可执行档映像，所以在分析的前一个阶段很是麻烦。后来在机缘巧合下发觉程序二进制档中包含UPX关键字，方知这是UPX加壳的，于是下载了官方的工具将程序脱壳了。</p>

<p>脱壳后终于可以进行静态分析了，这时候IDA终于可以一展身手了。话又说回来，写这程序哥们儿爱忘事儿，居然没有把符号清除掉，这样我很轻易地就发觉了程序使用了LUA脚本。后来通过追踪，发觉程序附带的encrypt.data就是LUA脚本。这个脚本文件是干嘛的呢？实际上，为了迷惑分析者，这款软件将实际的加密过程用LUA脚本语言来实现，要不是作者粗心了，估计想要在不知道这是LUA脚本的前提下分析程序行为够呛，至少我得深入LUA虚拟机里分析代码行为了。</p>

<p>发觉这一点后二话不说下载了LUA的源码，编译后开始执行这个脚本，但发觉执行失败，后来又用LUADec尝试恢复LUA编译后脚本的源代码也被告知失败。而他们的错误提示都是——Bad opcode。这样看来，作者是将官方LUA虚拟机的操作码给重新定义了。花了点时间研究对比了拨号程序和LUA官方解释器的代码，发觉实际上作者提替换方式为：</p>

<table>
<tr><td><b>官方操作码</b></td> <td><b>自定操作码</b></td></tr>
<tr><td>MOVE</td> <td>LOADNIL</td></tr>
<tr><td>LOADK</td> <td>LOADBOOL</td></tr>
<tr><td>LOADBOOL</td> <td>LOADK</td></tr>
<tr><td>LOADNIL</td> <td>MOVE</td></tr>
</table>

<p>找了些关于LUA官方二进制档格式的资料，自己写了一个转换软件，将这个不标准的LUA脚本文件转换为标准的LUA文件。本来想分析脚本行为直接得到解密算法的，但是首先反编译软件LUADec分析这个脚本直接crash了（后来查知这款软件尚不稳定），所以我不能直接分析LUA语言。再则我用ChunkSpy直接分析得出LUA的虚拟机代码，虽然我手头有LUA指令集参考，不过看着这个基于栈的方式工作的指令集我表示没有时间和兴趣再去分析了。</p>

<p>于是采用了折中的方案，你的密文不是运行脚本得出的嘛。OK，那我也运行你的脚本不也得出密码了。不过说来简单，做着难。总体说来是由于LUA不支持位运算，在加密过程中它就将位运算委托给主程式完成。于是整个加密过程包含了大量的interop，无疑增加了我的工作量，因为我需要完成所有脚本调用的函数，并把它们注册到LUA环境中去——共12条函数。但是一旦补全所有函数，生成同拨号器一样的加密结果就是如探囊取物了——直接运行脚本就行了。</p>

<p>下面我再将现有的分析结果总结一下：</p>

<p>首先，加密程序会取4个自变量，分别是账号、密码、随机数、时间（Unix Time Stamp）。我们设他们为strUser, strPassword, rand#以及time。密文是由上述四个变量决定的，密文有ASCII编码，由以下域构成：</p>

<p><img src="http://dahakawang.github.com/images/blogs/2012/dialer_pw_structure.png" alt="" /></p>

<p>对于A字段，这是常量字符串，也就是说这5个ASCII字符会被加到每个密文的开始。B字段是一个包含32个字符的区域，关于这个区段我下面再谈。</p>

<p>C字段包含4个字符，它是这样计算而来：首先对strPassword每个字节（不包括NULL）累加得到sum，然后有key = rand# XOR sum;我们取key这个值的低16位转换为ASCII（刚好最多四个字符不是么）。得到的四个ASCII字符就是C字段。C字段会将B字段最后4个ASCII字符替换掉。</p>

<p>D字段是原始账号，请注意原账号所有的字母将被转换为大写。</p>

<p>B字段格式如下：</p>

<pre><code>(B1）2010(B2)(B3)(B4)
</code></pre>

<p>其中B1长8个字符，是time转换为十六进制的ASCII值，2010是固定的4个字符，(B4)长4字符，他将被C字段替换。</p>

<p>B2和B3都是长为8个字符的字节，但目前在没有分析LUA脚本的前提下我只知道B2 = fn1(strUser, strPassword, rand#, time), B3 = fn3(strUser, strPassword, rand#, time)。也即是说B2和B3和四个自变量均有关，且加密过程fn1或fn2至少有一个包括MD5算法。</p>

<p>以上便是我目前为止的研究成果了，以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Visual C++增量链接以及.textbss]]></title>
    <link href="http://dahakawang.github.com/blog/2011/08/01/about-vc-increamental-linking-and-textbss/"/>
    <updated>2011-08-01T22:08:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2011/08/01/about-vc-increamental-linking-and-textbss</id>
    <content type="html"><![CDATA[<p>好的，文接上回，本文我就来讲讲微软link.exe连接器的Incremental Liking这个特性。当然这个其实不是微软linker独有的特性，很多链接器都有这个特性，这个特性实际上是为了提高链接速度的。</p>

<p>想象一下这个场景，我写了两个函数foo()和bar()，其中foo()在0x400100处而bar()紧接着保存在0x400200处。现在我将foo()改写了一下，添加了一些perfect的功能，然后编译了新的代码。不过现在的麻烦是foo()不可避免的变大了，他现在需要200h字节来保存了。那么链接器该怎么办？</p>

<!-- more -->

<p>一般的思考是——重新洗牌，将现有的编译好的exe删除了，然后重新布局所有的函数，也即是说bar()函数向后挪动0x100h字节的位置，给foo()腾出空间来。然后之后所有的函数都需要重新定位……对于大型软件来说这个处理时间开销是痛苦的，但作为程序员我们却不能避免需要不断的调试改代码，不断地重复这个耗时的工作。</p>

<p>不过我们现在并不需要给客户最终的发行代码，我们只是想要尽快地将程序的bug改掉然后去休息而已！于是，Incremental Linking出现了！它的原理如下：</p>

<p><img src="http://dahakawang.github.com/images/blogs/2012/increamental_linking.gif" alt="" /></p>

<p>现在连接器不会将所有函数紧挨着放在一块儿了，他们会在函数之间加上padding，这个时候函数要想添几句指令就有余地了。只要我们的改动不大，没有超过padding的范围连接器就不需要重新洗牌，这大大提高了链接的速度。</p>

<p>先别高兴，加入我们的改动很大，以至于超过padding能够搞定的范围怎么办？如上图，我们还会在整个section末尾设置一个较大的padding（当然具体在哪里要看实现，比如我这图是从GCC那里搞得，说的就是ld.exe的行为方式），这时候就可以将这个函数搬到这里来了。但有个毁灭性的问题——所有调用我这个函数的函数都必须重定位他们的call指令啊！</p>

<p>为了解决这个问题，我们引入了一个ILT表（Incremental Linking Table），这个表是放在.text区域中的（我在IDA中观察得知）。它的原理是什么呢？我们来看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="c1">;之前我们都是直接调用函数</span>
</span><span class="line">   <span class="nf">call</span> <span class="nv">foo</span>
</span><span class="line">
</span><span class="line"><span class="c1">;现在我们来点小把戏</span>
</span><span class="line">   <span class="nf">call</span> <span class="nv">foo_stub</span>
</span><span class="line">
</span><span class="line"><span class="nl">foo_stub:</span>
</span><span class="line">   <span class="nf">jmp</span> <span class="nv">foo</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们现在不直接调用函数，而是call到一个包含jmp指令的地方，然后由这个指令将我们的程度带往foo()函数的实现去。现在如果我们将foo()的实现改动过大后，linker直接将foo()移动了，然后只需要修改这个jmp指令就行了。可以看到，这种实现方式开销是O(1)。然后当很多个函数都用这种方式时，就形成了一个有jmp指令构成的表——这就是ILT表啦。</p>

<p>有兴趣的童鞋可以做下实验，在VS2010编译一次代码，然后用IDA或者W32Dasm之类的软件可以看到两个函数之间间隔了不少距离，而这些间隔就是我们所谓padding。padding被填充以<strong>0xCCh</strong>的数据。熟悉win32汇编的朋友这时候该笑而不语了，是的，这个值就是指令<strong>INT 3</strong>。在WIndows下，执行这个指令会引发一个异常，然后程序会被终止或是回到调试器去，这当然是出于安全性考虑的。这之后如果你在前一个函数加几句话，编译后可以看到两个函数位置不变，但函数间的padding变小了。</p>

<h2 id="textbss">和.textbss的关系</h2>

<p>之前有篇我讨论了PE常见的section，里面提到了这个节，下面我就详细介绍一下它的作用。</p>

<p>首先Incremental Linking作用不仅仅是在于减少我们重新连接程序所需要的时间，他还是我们调试时能够动态改动代码的前提。不知你还记得不，在那个炎热的夏天，你正汗流浃背地在没有空调的部屋里调试C代码（咳，说远了……）你直接修改了代码，然后VS直接在调试的时候将你的改动反映到程序里去了。这就是VS在Debug模式时动态编译代码的功能。</p>

<p>实际上这个功能是基于Incremental Linking机制的，而且是使用的Incremental Linking的第二套方案——直接找个大的地儿把修改的函数挪过去。</p>

<p>但是和.textbss有啥关系？</p>

<p>首先我们看到，.textbss有关键字bss，这就说明实际上这个节没有占据实际的硬盘空间。然后text关键字告诉我们这里段是包含代码的，另外用工具查知这个段有可执行属性更是印证了这个观点。没有代码，那要这个节有啥用呢？</p>

<p>你想到了么？是的，在VS动态编译的时候，他直接将被修改的函数放到了.textbss节里，然后修改了对应的ILT表项，是他指向这个位置。</p>

<p>说是简单，但实际上这个过程还个细节需要注意——你把我的函数挪地儿了，要是我正在执行这个函数怎么办？实际上，在改了ILT之后立刻会做的，就是检查当前程序所有线程的TIB，如果他们的EIP指向老的函数（它们正在执行老版本函数），我们就修改EIP使其指向新版本函数的对应位置。当然，这实际上暗示了，这个工作非要在调试程序的帮助下不可了。注意动态编译的功能只在Debug版本程序下有效,Release版本是不行的，因为Release版本默认禁用Incremental Linking。</p>

<p>下面是实验时间，以验证我的观点：</p>

<p>我就用手头上的程序来测试。有函数CheckValidPE()，它的RVA是0x12490h（你可理解为内存地址）。我的程序地址空间部分如下：</p>

<table>
  <tbody>
    <tr>
      <td>Section　　　</td>
      <td>　　　  RVA　　　</td>
      <td>　　　Size</td>
    </tr>
    <tr>
      <td>.textbss　　　</td>
      <td>　　　1000h　　　</td>
      <td>　　10000h</td>
    </tr>
    <tr>
      <td>.text　　　　　</td>
      <td>　　 11000h　　</td>
      <td>　　　7000h</td>
    </tr>
  </tbody>
</table>

<p>可以看到这两个函数实际上是位于.text节内的。我在CheckValidPE()上下个断，可以看到：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"> <span class="nf">bool</span> <span class="nv">PEAnalyser</span><span class="p">::</span><span class="nb">ch</span><span class="nv">eckValidPE</span><span class="p">()</span>
</span><span class="line"><span class="err">{</span>
</span><span class="line"><span class="err">00</span><span class="nf">D92490</span>  <span class="nv">push</span>        <span class="nb">ebp</span>
</span><span class="line"><span class="err">00</span><span class="nf">D92491</span>  <span class="nv">mov</span>         <span class="nb">ebp</span><span class="p">,</span><span class="nb">esp</span>
</span><span class="line"><span class="err">00</span><span class="nf">D92493</span>  <span class="nv">sub</span>         <span class="nb">esp</span><span class="p">,</span><span class="mh">0FCh</span>
</span><span class="line"><span class="err">00</span><span class="nf">D92499</span>  <span class="nv">push</span>        <span class="nb">ebx</span>
</span><span class="line"><span class="err">00</span><span class="nf">D9249A</span>  <span class="nv">push</span>        <span class="nb">esi</span>
</span><span class="line"><span class="err">00</span><span class="nf">D9249B</span>  <span class="nv">push</span>        <span class="nb">edi</span>
</span><span class="line"><span class="err">00</span><span class="nf">D9249C</span>  <span class="nv">push</span>        <span class="nb">ecx</span>
</span><span class="line"><span class="nf">......</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从这里我发觉了VS貌似从来都是随机装载PE映像的ImageBase位置的，搞得我之前一次实验满心欢喜用常用的0x400000h为基址换算了所有的RVA~~T_T。。。</p>

<p>我之前说了CheckValidPE()的RVA是0x12490h，这里的绝对地址是0x00D92490h，我们用0x00D92490h-0x12490h = 0xD80000h，得到两个的差值。哈哈，看来这次的映像基址被射到了0xD80000h。</p>

<p>我回到VS源代码视图上，对代码稍作粉饰，嗯，然后它发生了！！！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="nasm"><span class="line"><span class="nf">bool</span> <span class="nv">PEAnalyser</span><span class="p">::</span><span class="nb">ch</span><span class="nv">eckValidPE</span><span class="p">()</span>
</span><span class="line"><span class="err">{</span>
</span><span class="line"><span class="err">00</span><span class="nf">D81000</span>  <span class="nv">push</span>        <span class="nb">ebp</span>
</span><span class="line"><span class="err">00</span><span class="nf">D81001</span>  <span class="nv">mov</span>         <span class="nb">ebp</span><span class="p">,</span><span class="nb">esp</span>
</span><span class="line"><span class="err">00</span><span class="nf">D81003</span>  <span class="nv">sub</span>         <span class="nb">esp</span><span class="p">,</span><span class="mh">0FCh</span>
</span><span class="line"><span class="err">00</span><span class="nf">D81009</span>  <span class="nv">push</span>        <span class="nb">ebx</span>
</span><span class="line"><span class="err">00</span><span class="nf">D8100A</span>  <span class="nv">push</span>        <span class="nb">esi</span>
</span><span class="line"><span class="err">00</span><span class="nf">D8100B</span>  <span class="nv">push</span>        <span class="nb">edi</span>
</span><span class="line"><span class="err">00</span><span class="nf">D8100C</span>  <span class="nv">push</span>        <span class="nb">ecx</span>
</span><span class="line"><span class="err">00</span><span class="nf">D8100D</span>  <span class="nv">lea</span>         <span class="nb">edi</span><span class="p">,[</span><span class="nb">ebp</span><span class="o">-</span><span class="mh">0FCh</span><span class="p">]</span>
</span><span class="line"><span class="err">00</span><span class="nf">D81013</span>  <span class="nv">mov</span>         <span class="nb">ecx</span><span class="p">,</span><span class="mh">3Fh</span>
</span><span class="line"><span class="err">00</span><span class="nf">D81018</span>  <span class="nv">mov</span>         <span class="nb">eax</span><span class="p">,</span><span class="mh">0CCCCCCCCh</span>
</span><span class="line"><span class="err">00</span><span class="nf">D8101D</span>  <span class="nv">rep</span> <span class="nv">stos</span>    <span class="kt">dword</span> <span class="nv">ptr</span> <span class="nb">es</span><span class="p">:[</span><span class="nb">edi</span><span class="p">]</span>
</span><span class="line"><span class="nf">.....</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意看函数变到这个地址来了！！而且VS的调试程序指针也确实说明EIP被更改了。</p>

<p>我们来算一下，看看这个地址在哪里？用这里新的函数起始地址减去我们之前计算的的基址得到RVA = 0xD81000h - 0xD80000h = 0x1000h</p>

<p>回去查一下我的内存地址空间，RVA为0x1000h正是位于.textbss节的起始位置。看来我的猜测是正确的。</p>

<h2 id="section">小结</h2>

<p>小结一下，关于Incremental Linking，由于他的机制所致，势必带来程序体积的臃肿以及执行的低效，但是由于我们只是在Debug程序是使用，所以问题不大。另外VS默认是在Debug是开启Incremental Linking而Release模式关闭这个特性的。这说明在Release时，我们不能够动态的改动代码了。</p>

<p>另外注意Incremental Linking是和/LTCG 选项不兼容的，你不能同时开启Incremental Linking和Link Time Code Generation，从这个角度讲，使用Incremental Linking进一步会造成程序执行效率下降。所以，我们应该在发布程序时，注意避免带上这个特性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PE文件格式系列（一）——探究PE文件常见Section作用]]></title>
    <link href="http://dahakawang.github.com/blog/2011/08/01/the-common-sections-in-pe-format/"/>
    <updated>2011-08-01T20:40:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2011/08/01/the-common-sections-in-pe-format</id>
    <content type="html"><![CDATA[<p>最近由于各种原因想要研究一下PE文件，要彻底研究PE和COFF文件格式当然是非研究微软自己的技术白皮书——《Microsoft Portable Executable and Common Object File Format Specification》不可了。于是花了一点时间看看，有些心得，和大家分享一下。</p>

<!-- more -->

<p>首先本文不是讨论PE文件格式本身的，这属于技术规范的范畴，大家要是感兴趣可以参看上文中提到的微软的资料。要是不太喜欢E文的朋友也可以在网上找到很多描述PE格式的文章，在就不再这里赘述了。再说，就算我想讲，估计也讲不好（受限于本人的语文水平orz）</p>

<p>我们都很清楚，实际上PE格式文件里面的section这个东西是个很自由的玩意儿，你想把神马数据，代码划分到哪个section完全是你的自由。我们一般按照数据所需的属性来进行section的划分，比如我们把代码放到.text section而把数据放到.data section里。但是这种划分并没有什么约束限制：首先只要你愿意，你完全可以把代码放在一个叫做stupid的section里（当然这个名字按照PE标准不能超过8个字节）；其次同一个section中也不是只能有一种数据，比如我可以把程序的符号表同常量数据一同放在.data里（当然现实中他们是分开来的）。</p>

<p>section的存在并不是为了以数据功能为准则划分数据，而是以数据属性为标准来归类数据。哪些属性？就是可读性、可写性以及可执行性。为什么代码放在.text里？那是因为代码是可读可执行但不可写的；为什么我可以将常量数据和程序符号数据放在一起？因为他们都是可读但不可写亦不可执行的；为什么常量数据和全局数据却不能放到一起？那是因为前者要求不可读但后者却要求这个属性。</p>

<p>了解了section这个东西，下面我们就来分析一下Win32程序中常见的一些section吧（说常见也只能说微软的linker生成的程序是这样了，而其他诸如Borland的连接器可不一定使用下面这些section名字）：</p>

<p><strong>.text</strong> - 不多说了，就是保存代码的节</p>

<p><strong>.data</strong> - 保存数据的节，这个对应C语言中以初始化的全局变量数据。想想为什么你在源码里初始化一个全局变量后运行时这个变量的值正是你想要的那个？int a = 12;并不意味着CRT为你执行了一个赋值语句，而是a在PE文件中保存的位置已经被硬编码了一个12的值。这样loader加载程序时，你给的初值被从PE文件读取到了内存中变量a的位置，这样才使你的变量a有了初值。</p>

<p><strong>.rdata</strong> - 保存常量数据的节。这个可以对应C语言中的常数和常量字符串，同上面一样的原因，他们的初值被保存到了PE文件的次Section中，而不是在运行时被赋值。</p>

<p><strong>.bss</strong> - (Block Start with Symbol)这个section对应C程序中的全局未初始化变量。啥？你说C中未初始化的全局变量实际上全被初始化成了0？这是因为实际上操作系统是这样干的——你的全局未初始化变量由于没有初值，所以不需要将值像上面两个一样保存到PE文件中（所以.bss节除了描述信息之外不占据磁盘空间），但是.bss会描述一段内存区域，loader在加载.bss section时直接开辟这么一块包括所有未初始化数据的内存区域，然后直接将这区域清零。这就是C中全局未初始化数据之所以为零的原因了。</p>

<p><strong>.idata</strong> - 这个是保存程序导入表(Import Table)的节。当然，IT、ILT以及IAT也常常被保存在.rdata中，为什么？是考虑到安全的因素，所以将IAT放在不可写的.rdata里以防止IAT被恶意更改从而造成程序的安全隐患吧。</p>

<p><strong>.edata</strong> - 这个是保存导处表的(Export Table)的节。</p>

<p><strong>.reloc</strong> - 这个节是保存重定位数据的</p>

<p><strong>.rsrc</strong> - 这节是保存程序资源的。想你的程序字符串啊、对话框模板啊、位图、鼠标光标什么的都在这里。实际上这个节储存.resx文件编译后的结果。</p>

<p><strong>.textbss</strong> - 这节比较好玩，它是和微软Incremental Linking(增量链接)特性相关的。关于Incremental的特性，我在<a href="http://dahakawang.github.com/blog/2011/08/01/about-vc-increamental-linking-and-textbss/">这篇文章</a>中有说明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World程序背后的故事解密（一）—— 编译器的选项和C运行时库]]></title>
    <link href="http://dahakawang.github.com/blog/2011/07/22/compiler-and-c-runtime/"/>
    <updated>2011-07-22T16:03:00+08:00</updated>
    <id>http://dahakawang.github.com/blog/2011/07/22/compiler-and-c-runtime</id>
    <content type="html"><![CDATA[<p>作为一个程序员，想必大家都会对HelloWorld这个程序是深有感触吧。是的，就是这个程序第一次带我们进入了神奇的计算机编程的世界，指引我们开始走上了程序员这条充满了艰辛和快乐的路。HelloWorld对我们这群程序员来讲意义是非比寻常的，因此我想更加深入的研究一下C语言版的HelloWorld程序，撕开它的外衣，将隐藏在简单表象下的运行时秘密拿出来给各位看看。</p>

<!-- more -->

<p>这个系列文章预计将通过对CRT源代码的分析，结合对C程序反汇编和动态调试得出的结果，试图阐述一个程序整个生命周期中CRT所起的作用，从而使各位对C语言的各种底层机制有所了解。但是值得注意的是，C语言的底层是高度依赖具体的OS来实现其功能的，所以我们的分析不能够脱离实际环境。我在撰写本文时所用的环境是Windows 7，并且使用Visual Studio 2010的C语言编译器。</p>

<h2 id="winmainmain">WinMain还是main？</h2>

<p>作为windows下的开发人员，我们都知道，M$在标准C定义的入口函数main之外还定义了一个入口函数WinMain，这个函数是你编写win32程序的默认程序入口。那么WinMain和main到底有什么不一样呢？</p>

<p>我们知道在VS建立工程的时候，我们可以指定建立工程的类型（console还是win32），这个实际上就决定了我们程序的入口点是什么。但是，两种类型在编译器和连接器看来到底有什么差异呢？通过对比编译链接的命令行可以看出，实际上两种工程主要有两点差异：</p>

<ol>
  <li>console工程定义_CONSOLE宏，而win32工程会定义_WINDOWS宏</li>
  <li>console工程在链接选项里指定/subsystem:console，而win32工程在连接选项里指定/subsystem:windows</li>
</ol>

<p>实际上，第一点差异影响的是编译器的工作，通过定义_WINDOWS和_CONSOLE宏，可以实现针对控制台和GUI程序在编译时的配置。这就像我们通过定义_DEBUG宏实现在调试时显示调试信息而在发布时取消调试信息的原理有异曲同工之妙。</p>

<p>第二点差异影响的是连接器的工作。由于不同的工程类型对应不同的入口点，通过设置连接器subsystem的参数，我们可以指定入口点到底是哪一个。我们分析一下微软提供的CRT的实现源文件，在crt0.c里是c运行时的初始化相关例程（实际上不止crt0.c，有关这一系列初始化源文件，我会在下一篇文章中分析）。我们可以看到实际上我们的C程序第一个载入的函数是mainCRTStartup或者WinMainCRTStartup，这两个入口函数分别对应Windows下控制台程序和图形界面程序的入口点。在他两本身的实现中，他们各自调用了main和WinMain函数。那么mainCRTStartup或WinMainCRTStartup又是谁指定的呢？实际上就是连接器，连接器在生成PE文件的时候，会指明代码段程序的入口地址，这个信息会被操作系统的loader使用，在装载我们的可执行程序的时候，loader根据连接器指定的入口点指导程序开始执行。</p>

<h2 id="unicodembcs">Unicode还是MBCS？</h2>

<p>时过境迁，现代的软件开发早已不是一个人的游戏，也不再是在某个小网站上发布然后收取注册费用的小打小闹的盈利方式。我们开始追求是国际化的发展，不仅要在国内市场推广我们的产品，还想在在国外的市场中分一杯羹。这就要求我们的软件有Globalization的意识，而其中最重要的就是语言问题。</p>

<p>想当初ANSI制定文字编码ASCII的时候，没有想过国际化的潜在需求，也没有考虑各领域符号的需求，从而使得ASCII难以表示世界上其他国家的文字符号，也不能表示数学化学等学科的领域符号。为了解决这个问题，各地区在引入问题编码时根据各自的国情作了修改，当然还得兼容原始的ASCII编码，毕竟这才是老祖宗级别的人物。但是各地区之间的编码却不能兼容（比如台湾使用BIG5繁体编码和咱们使用的GBK就不能相互兼容），这也是微软在其操作系统里面引入code page机制的直接原因——为了统筹协调各地区文字编码的差异。</p>

<p>后来有人站出来表示不能再这样下去了，我们需要一个世界统一的编码，然后你懂的——Unicode诞生了。</p>

<p>咳，说远了。回到正题，由于我们在开发程序时需要考虑程序最终部署在不同的地区，照理说最好的实践就是将程序编译为Unicode版本的，毕竟现在Windows系统内核天生是使用Unicode的，你使用MBCS还得在交给内核前被转换一下，影响效率。但是由于各种现实因素的影响，我们还是不能抛弃MBCS，这就要求我们能够编译两种版本的能力，我们不讨论这其中的方法，但是我们应该知道最基本的，我们可以在程序中指定我们使用哪种编码。</p>

<p>在VS中，有两个地方是与文字编码相关的：</p>

<ol>
  <li>定义_UNICODE和_MBCS宏</li>
  <li>使用wmain和wWinMain函数</li>
</ol>

<p>首先对于第一个，类似上面提到的_CONSOLE和_WINDOWS宏的功能，它也是制定了我们程序在编译是的一些配置，比如ASCII版本的API还是Widechar版本的API。</p>

<p>第二个实际上是影响连接器的行为。我们知道程序的实际入口函数是mainCRTStartup和WinMainCRTStartup，实际上还有两个是wmainCRTStartup和wWinMainCRTStartup分别对应Unicode版本的入口。通过将几次试验，可知控制台和图形界面（main和WinMain）是由编译选项决定的，最终由连接器将其链接进可执行档。但是是否是宽字符版却不是由编译选项决定的，它是由我们源码中出现的是那种版本的入口函数决定的。打个比方，即是我们设置使用unicode，但若是我们的入口函数只定义了main，则链接器还是链接mainCRTStartup版本的函数。由此可知，编译器选项中的Unicode或是MBCS只是在编译时增加相应的宏定义而已，不会影响链接器的功能（即是具体链接那个版本的CRTStartup函数。</p>

<h2 id="section">动态链接版本还是静态链接版本？</h2>

<p>在编译器选项中同样我们能够指定使用动态链接还是静态链接的CRT库函数，在微软的MSDN上我们可以看到以下的对应关系：libcmt.lib对应静态版本c运行时函数的静态实现，而msvcrt.lib对应动态版本的c运行时函数的导入库。</p>

<p>实际上，如果我们使用动态版本的CRT，那么其初始化代码实现可参照crtexe.c，而若是使用静态链接版本的话，其初始化代码则可在crt0.c中找到。本文探讨的只是静态版本的CRT，而暂不涉及动态链接的内容。</p>

<p>我们现在知道了C编译器选项对于C程序底层的一些影响（子系统决定了入口是main还是WinMain，Unicode宏却不能决定入口是否是宽字符版本的，静态和动态编译的差异等），在接下来的几篇文章中，我将抽丝剥茧，一点一点破解CRT隐藏在台面下的一些实现细节。</p>
]]></content>
  </entry>
  
</feed>
